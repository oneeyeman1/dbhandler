// -*- C++ -*-
//
// generated by wxGlade 1.1.0 on Wed Jul  2 23:40:30 2025
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
#include <wx/wx.h>
#include <map>
#include <vector>
#include "wx/dynlib.h"
#include "wx/stdpaths.h"
#include "database.h"
#include "propertypagebase.h"
#include "indexproperties.h"

// begin wxGlade: ::extracode
// end wxGlade
typedef int (*DROPINDEXOPT)(wxWindow *, const std::wstring &, const std::wstring &, const std::wstring &, const std::wstring &, DropIndexOption &);
typedef int (*CREATEFOREIGNKEY)(wxWindow *parent, wxString &, DatabaseTable *, std::vector<std::wstring> &, std::vector<std::wstring> &, std::wstring &, int &, int &, Database *, bool &, bool, std::vector<FKField *> &, int &);

TableIndex::TableIndex(wxWindow *parent, wxWindowID id, Database *db, DatabaseTable *table, const std::map<unsigned long, std::vector<FKField *> > &fKeys, bool isIndex):
    PropertyPageBase(parent, id)
{
    auto counter = 1;
    m_isIndex = isIndex;
    m_db = db;
    m_table = table;
    InitGui();
    for( std::map<unsigned long, std::vector<FKField *> >::const_iterator it = fKeys.begin(); it != fKeys.end(); ++it )
    {
        for( std::vector<FKField *>::const_iterator it1 = (*it).second.begin(); it1 < (*it).second.end(); ++it1 )
        {
            auto name =  (*it1)->GetFKName();
            if( name.empty() )
                name = L"fk_" + std::to_wstring( counter );
            list_box_1->Append( name );
            counter++;
        }
    }
    if( list_box_1->GetCount() > 0 )
    {
        m_currentFK = fKeys.at( 0 );
        list_box_1->SetSelection( 0 );
    }
}

void TableIndex::OnIndexSelected(wxCommandEvent &WXUNUSED(event))
{
    m_edit->Enable( true );
    m_delete->Enable( true );
}

TableIndex::TableIndex(wxWindow *parent, wxWindowID id, Database *db, DatabaseTable *table, const std::vector<std::wstring> &indexes, bool isIndex) :
  PropertyPageBase(parent, id)
{
    m_isIndex = isIndex;
    m_table = table;
    m_db = db;
    InitGui();
    for( auto index : indexes )
        list_box_1->Append( index );
    if( list_box_1->GetCount() > 0 )
    {
        m_currentIndex = indexes.at( 0 );
        list_box_1->SetSelection( 0 );
    }
}

void TableIndex::InitGui()
{
    // begin wxGlade: TableIndex::TableIndex
    wxBoxSizer* sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    wxBoxSizer* sizer_2 = new wxBoxSizer( wxVERTICAL );
    sizer_1->Add( sizer_2, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    wxGridSizer* grid_sizer_1 = new wxGridSizer( 1, 2, 0, 5 );
    sizer_2->Add( grid_sizer_1, 1, wxEXPAND, 0 );
    list_box_1 = new wxListBox( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxLB_SINGLE );
    grid_sizer_1->Add( list_box_1, 0, wxEXPAND, 0 );
    wxBoxSizer* sizer_3 = new wxBoxSizer( wxVERTICAL );
    grid_sizer_1->Add( sizer_3, 1, wxEXPAND, 0 );
    m_edit = new wxButton( this, wxID_ANY, _( "&Edit..." ) );
    m_edit->Enable( false );
    sizer_3->Add( m_edit, 0, 0, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    m_new = new wxButton( this, wxID_ANY, _( "&New..." ) );
    sizer_3->Add( m_new, 0, 0, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    m_delete = new wxButton( this, wxID_ANY, _( "&Delete" ) );
    m_delete->Enable( false );
    sizer_3->Add( m_delete, 0, 0, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );

    SetSizer( sizer_1 );
    sizer_1->Fit( this );
    // end wxGlade
    list_box_1->Bind( wxEVT_LISTBOX, &TableIndex::OnIndexSelected, this );
    m_new->Bind( wxEVT_BUTTON, &TableIndex::OnNew, this );
    m_edit->Bind( wxEVT_UPDATE_UI, &TableIndex::OnButtonUpdateUI, this );
    m_delete->Bind( wxEVT_UPDATE_UI, &TableIndex::OnButtonUpdateUI, this );
    m_delete->Bind( wxEVT_BUTTON, &TableIndex::OnDelete, this );
    auto stdPath = wxStandardPaths::Get();
    wxString libName = "";
#ifdef __WXMSW__
    libName = "\\dialogs";
#elif __WXMAC__
    libName = "/liblibdialogs.dylib";
#else
    libName = "/libdialogs";
#endif
    m_lib.Load( wxStandardPaths::Get().GetSharedLibrariesDir() + libName );
    if( m_lib.IsLoaded() )
        m_initialized = true;
}

void TableIndex::OnButtonUpdateUI( wxUpdateUIEvent &event )
{
    if( list_box_1->GetSelection() == wxNOT_FOUND )
        event.Enable( false );
    else
        event.Enable( true );
}

void TableIndex::OnDelete(wxCommandEvent &WXUNUSED(event))
{
    int result = 0;
    wxString fkName = list_box_1->GetString( list_box_1->GetSelection() );
    std::wstring command;
    std::vector<std::wstring> errors;
    wxString message = _( "The " );
    if( m_isIndex )
        message += _( "index " );
    else
        message += _( "foreign key " );
    message += fkName;
    message += _( " will be deleted. This can't be undone. Want to prceed?" );
    auto responce = wxMessageBox( message, _( "Warning" ), wxYES_NO | wxNO_DEFAULT | wxICON_EXCLAMATION );
    if( responce == wxYES )
    {
        if( !m_isIndex )
        {
            if( m_db->GetTableVector().m_type == L"SQLite" )
            {
                fkName = ",\\s*(CONSTRAINT\\s+\\w+\\s+)?FOREIGN\\s+kEY\\s*\\(\\s*";
                auto it = m_currentFK.begin();
                while( it < m_currentFK.end() )
                {
                    fkName += L"(\\')?";
                    fkName += (*it)->GetOriginalFieldName();
                    fkName += L"(\\')?";
                    fkName += L"\\s*";
                    it++;
                    if( it != m_currentFK.end() )
                        fkName += L",\\s*";
                    else
                        fkName += L"\\)\\s*";
                }
                fkName += L"REFERENCES\\s+";
                fkName += L"(\\')?" + m_currentFK[0]->GetReferencedTableName() + L"(\\')?" + L"\\s*\\(\\s*";
                it = m_currentFK.begin();
                while( it < m_currentFK.end() )
                {
                    fkName += L"(\\')?";
                    fkName += (*it)->GetReferencedFieldName();
                    fkName += L"(\\')?";
                    fkName += L"\\s*";
                    it++;
                    if( it != m_currentFK.end() )
                        fkName += L",\\s*";
                    else
                        fkName += L"\\)\\s*";
                }
            }
            result = m_db->DropForeignKey( command, m_table, fkName.ToStdWstring(), false, m_currentFK, errors  );
        }
        else
        {
            int response = wxCANCEL;
            DropIndexOption options;
            if( m_db->GetTableVector().m_type != L"SQLite" )
            {
                if( m_lib.IsLoaded() )
                {
                    DROPINDEXOPT func = (DROPINDEXOPT) m_lib.GetSymbol( "GetDropIndexOption" );
                    response = func( nullptr, fkName.ToStdWstring(), m_table->GetFullName(), m_db->GetTableVector().m_type, m_db->GetTableVector().m_subtype, options );
                }
            }
            if( response == wxID_APPLY || m_db->GetTableVector().m_type == L"SQLite" )
                result = m_db->DropIndex( m_table->GetFullName(), fkName.ToStdWstring(), options,  errors );
        }
        if( result )
            for( auto error : errors )
                wxMessageBox( error, _( "Error" ), wxOK | wxICON_EXCLAMATION );
        else
            list_box_1->Delete( list_box_1->GetSelection() );
    }
}

void TableIndex::OnNew(wxCommandEvent &event)
{
    int result = wxID_CANCEL;
    wxString fkName;
    if( !m_isIndex )
    {
        CREATEFOREIGNKEY func = (CREATEFOREIGNKEY) m_lib.GetSymbol( "CreateForeignKey" );
        std::vector<std::wstring> origFields, refKeyFields, errors;
        std::wstring refTableName;
        int deleteProp = NO_ACTION_DELETE, updateProp = NO_ACTION_UPDATE, match = 0, res = 0;
        bool logOnly = false;
        std::vector<FKField *> newFK;
        result = func( GetParent(), fkName, m_table, origFields, refKeyFields, refTableName, deleteProp, updateProp, m_db, logOnly, false, newFK, match );
        if( result != wxID_CANCEL )
        {
            std::wstring command;
//            int res = m_db->ApplyForeignKey( command, fkName, errors );
            // new FK creted
            if( res )
            {
                for( std::vector<std::wstring>::iterator it = errors.begin(); it < errors.end(); ++it )
                {
                    wxMessageBox( (*it), _( "Error" ), wxOK | wxICON_ERROR );
                }
            }
        }
    }
}

