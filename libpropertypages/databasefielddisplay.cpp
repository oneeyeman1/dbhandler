// -*- C++ -*-
//
// generated by wxGlade 1.0.4 on Mon Jan 15 21:11:42 2024
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include <wx/dynlib.h>
#include "wx/filename.h"
#include "wx/stdpaths.h"
#include "wx/display.h"
#include <wx/intl.h>
#include "database.h"
#include "propertypagebase.h"
#include "databasefielddisplay.h"

// begin wxGlade: ::extracode
// end wxGlade

typedef int (*ADDEDITMASK)(wxWindow *, bool, const wxString &, const wxString &, Database *);

DatabaseFieldDisplay::DatabaseFieldDisplay(wxWindow* parent, const FieldTableDisplayProperties &prop, const wxString &type, Database *db):  PropertyPageBase( parent )
{
    auto ppi = wxDisplay::GetStdPPIValue();
    m_db = db;
    m_type = type;
    // begin wxGlade: DatabaseFieldDisplay::DatabaseFieldDisplay
    wxBoxSizer* sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    wxBoxSizer* sizer_2 = new wxBoxSizer( wxVERTICAL );
    sizer_1->Add( sizer_2, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    wxBoxSizer* sizer_3 = new wxBoxSizer( wxVERTICAL );
    sizer_2->Add( sizer_3, 0, wxEXPAND, 0 );
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer( 2, 2, 3, 5 );
    sizer_3->Add( grid_sizer_1, 0, wxEXPAND, 0 );
    m_label1 = new wxStaticText( this, wxID_ANY, _( "Dislay Frmat" ) );
    grid_sizer_1->Add( m_label1, 0, wxALIGN_CENTER_VERTICAL, 0 );
    grid_sizer_1->Add( 5, 5, 0, 0, 0 );
    m_formats = new wxListBox( this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxLB_SINGLE );
    for( std::map<int, std::vector<std::pair<std::wstring,std::wstring> > >::const_iterator it = prop.m_format.begin(); it != prop.m_format.end(); ++it )
    {
        for( std::vector<std::pair<std::wstring, std::wstring> >::const_iterator it1 = (*it).second.begin(); it1 < ( *it ).second.end(); ++it1 )
        {
            auto item = m_formats->Append( (*it1).first, new wxStringClientData( (*it1).second ) );
            if( (*it).first == 1 )
                m_formats->Select( item );
        }
    }
    grid_sizer_1->Add( m_formats, 0, /*wxEXPAND*/0, 0 );
    wxBoxSizer* sizer_4 = new wxBoxSizer( wxVERTICAL );
    grid_sizer_1->Add( sizer_4, 0, wxEXPAND, 0 );
    m_edit = new wxButton( this, wxID_ANY, _( "Edit" ) );
    sizer_4->Add( m_edit, 0, 0, 0 );
    sizer_4->Add( 5, 5, 0, wxEXPAND, 0 );
    m_new = new wxButton( this, wxID_ANY, _( "New..." ) );
    sizer_4->Add( m_new, 0, 0, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    wxStaticBoxSizer* sizer_5 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, wxEmptyString ), wxVERTICAL );
    sizer_3->Add( sizer_5, 0, 0, 0 );
    wxGridSizer* grid_sizer_2 = new wxGridSizer( 2, 2, 5, 4 );
    sizer_5->Add( grid_sizer_2, 0, 0, 0 );
    wxFlexGridSizer* grid_sizer_3 = new wxFlexGridSizer( 2, 2, 5, 5 );
    grid_sizer_2->Add( grid_sizer_3, 0, 0, 0 );
    m_label2 = new wxStaticText( sizer_5->GetStaticBox(), wxID_ANY, _( "Justify" ) );
    grid_sizer_3->Add( m_label2, 0, wxALIGN_CENTER_VERTICAL, 0 );
    const wxString m_justify_choices[] = {
        _( "Left" ),
        _( "Right" ),
    };
    m_justify = new wxComboBox( sizer_5->GetStaticBox(), wxID_ANY, "", wxDefaultPosition, wxDefaultSize, 2, m_justify_choices, wxCB_DROPDOWN );
    m_justify->SetSelection( 0 );
    grid_sizer_3->Add( m_justify, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_label3 = new wxStaticText( sizer_5->GetStaticBox(), wxID_ANY, _( "Case" ) );
    grid_sizer_3->Add( m_label3, 0, wxALIGN_CENTER_VERTICAL, 0 );
    const wxString m_case_choices[] = {
        _( "Any" ),
        _( "UPPER" ),
        _( "lower" ),
    };
    m_case = new wxComboBox( sizer_5->GetStaticBox(), wxID_ANY, "", wxDefaultPosition, wxDefaultSize, 3, m_case_choices, wxCB_DROPDOWN );
    m_case->SetSelection( 0 );
    grid_sizer_3->Add( m_case, 0, 0, 0 );
    wxFlexGridSizer* grid_sizer_4 = new wxFlexGridSizer( 2, 3, 5, 5 );
    grid_sizer_2->Add( grid_sizer_4, 0, 0, 0 );
    wxStaticText* m_label4 = new wxStaticText( sizer_5->GetStaticBox(), wxID_ANY, _( "Display Height" ) );
    grid_sizer_4->Add( m_label4, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_displayHeight = new wxTextCtrl( sizer_5->GetStaticBox(), wxID_ANY, "" );
    m_displayHeight->SetValue( wxString::Format( "%.2f", (double) prop.m_height / (double) ppi ) );
    grid_sizer_4->Add( m_displayHeight, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_label5 = new wxStaticText( sizer_5->GetStaticBox(), wxID_ANY, _( "in" ) );
    grid_sizer_4->Add( m_label5, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_label6 = new wxStaticText( sizer_5->GetStaticBox(), wxID_ANY, _( "Dsplay Width" ) );
    grid_sizer_4->Add( m_label6, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_displayWidth = new wxTextCtrl( sizer_5->GetStaticBox(), wxID_ANY, "" );
    m_displayWidth->SetValue( wxString::Format( "%.2f", (double) prop.m_width / (double) ppi ) );
    grid_sizer_4->Add( m_displayWidth, 0, 0, 0 );
    m_label7 = new wxStaticText( sizer_5->GetStaticBox(), wxID_ANY, _( "in" ) );
    grid_sizer_4->Add( m_label7, 0, wxALIGN_CENTER_VERTICAL, 0 );
    grid_sizer_2->Add( 5, 5, 0, 0, 0 );
    m_picture = new wxCheckBox( sizer_5->GetStaticBox(), wxID_ANY, _( "Picture" ), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    grid_sizer_2->Add( m_picture, 0, 0, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );

    SetSizer( sizer_1 );
    sizer_1->Fit( this );
    // end wxGlade
    m_justify->Bind( wxEVT_COMBOBOX, &DatabaseFieldDisplay::OnPageModified, this );
    m_displayHeight->Bind( wxEVT_COMBOBOX, &DatabaseFieldDisplay::OnPageModified, this );
    m_displayWidth->Bind( wxEVT_COMBOBOX, &DatabaseFieldDisplay::OnPageModified, this );
    m_new->Bind( wxEVT_BUTTON, &DatabaseFieldDisplay::OnEditNewFormat, this );
    m_edit->Bind( wxEVT_BUTTON, &DatabaseFieldDisplay::OnEditNewFormat, this );
    m_formats->SetSelection( wxNOT_FOUND );
    m_justify->SetFocus();
}

void DatabaseFieldDisplay::OnPageModified( wxCommandEvent &WXUNUSED(event ))
{
    PageEdited();
}

void DatabaseFieldDisplay::OnEditNewFormat(wxCommandEvent &event)
{
    wxDynamicLibrary lib;
    wxString format;
    bool isNew;
    if( event.GetEventObject() == m_new )
    {
        isNew = true;
        format = "";
    }
    else
    {
        isNew = false;
        format = m_formats->GetString( m_formats->GetSelection() );
    }
    auto stdPath = wxStandardPaths::Get();
    wxString libName = "", libPath = "";
#ifdef __WXOSX__
    wxFileName fn( stdPath.GetExecutablePath() );
    fn.RemoveLastDir();
    libPath = fn.GetPathWithSep() + "Frameworks/";
    libName = libPath + "liblibdialogs.dylib" ;
#elif __WXGTK__
    libPath = stdPath.GetInstallPrefix() + "/lib/";
    libName = libPath + "libdialogs";
#elif __WXMSW__
    wxFileName fn( stdPath.GetExecutablePath() );
    libPath = fn.GetPathWithSep();
    libName = libPath + "dialogs";
#endif
    lib.Load( libName );
    if( lib.IsLoaded() )
    {
        ADDEDITMASK func = (ADDEDITMASK) lib.GetSymbol( "AddEditMask" );
        func( nullptr, isNew, m_type, format, m_db );
    }
}

void DatabaseFieldDisplay::OnUpdateUIEditButton(wxUpdateUIEvent &event)
{
    if( m_formats->GetSelection() )
        event.Enable( false );
    else
        event.Enable( true );
}

