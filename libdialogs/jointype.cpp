// -*- C++ -*-
//
// generated by wxGlade 0.7.2 (standalone edition) on Tue Apr 18 20:51:59 2017
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#include "wx/mdi.h"
#endif

#include "wx/listctrl.h"
#include "jointype.h"

JointType::JointType(wxWindow* parent, wxWindowID id, const wxString& title, const wxString &origTable, const wxString &refTable, const wxString &origField, const wxString &refField, long type, const wxPoint& pos, const wxSize& size, long style) :
    wxDialog(parent, id, title, pos, size, style)
{
    m_title = title;
    m_type = type;
    m_origTable = origTable;
    m_refTable = refTable;
    m_origField = origField;
    m_refField = refField;
    // begin wxGlade: MyDialog::MyDialog
    m_panel = new wxPanel( this, wxID_ANY );
    m_label = new wxStaticText( m_panel, wxID_ANY, _( "Join rows in " ) + m_refTable + _( " and " ) + m_origTable + _( " where" ) );
    m_OK = new wxButton( m_panel, wxID_OK, _( "OK" ) );
    m_joinType = new wxListCtrl( m_panel, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxLC_REPORT | wxLC_NO_HEADER | wxLC_SINGLE_SEL );
    m_Cancel = new wxButton( m_panel, wxID_CANCEL, _( "Cancel" ) );
    m_delete = new wxButton( m_panel, wxID_ANY, _( "Delete" ) );
    m_help = new wxButton( m_panel, wxID_HELP, _( "Help" ) );

    set_properties();
    do_layout();
    m_joinType->Bind( wxEVT_LIST_ITEM_ACTIVATED, &JointType::OnListItemActivated, this );
    m_joinType->Bind( wxEVT_LISTBOX_DCLICK, [&](wxCommandEvent &WXUNUSED(event)) { EndModal( wxID_OK ); });
    // end wxGlade
}

void JointType::set_properties()
{
    // begin wxGlade: MyDialog::set_properties
    SetTitle( m_title );
    m_OK->SetDefault();
    // end wxGlade
    m_joinType->InsertColumn( 0, "" );
    m_joinType->InsertColumn( 1, "" );
    wxString buf;
    long temp = m_joinType->InsertItem( 0, "=" );
    m_joinType->SetItemData( temp, 0 );
    buf.Printf( "%s.%s = %s.%s", m_refTable, m_refField, m_origTable, m_origField );
    m_joinType->SetItem( temp, 1, buf );
    temp = m_joinType->InsertItem( 1, "=" );
    m_joinType->SetItemData( temp, 1 );
    buf.Printf( "%s.%s = %s.%s and rows from %s that have no %s", m_refTable, m_refField, m_origTable, m_origField, m_refTable, m_origTable );
    m_joinType->SetItem( temp, 1, buf );
    temp = m_joinType->InsertItem( 2, "=" );
    m_joinType->SetItemData( temp, 2 );
    buf.Printf( "%s.%s = %s.%s and rows from %s that have no %s", m_refTable, m_refField, m_origTable, m_origField, m_origTable, m_refTable );
    m_joinType->SetItem( temp, 1, buf );
    temp = m_joinType->InsertItem( 3, "<" );
    m_joinType->SetItemData( temp, 3 );
    buf.Printf( "%s.%s < %s.%s", m_refTable, m_refField, m_origTable, m_origField );
    m_joinType->SetItem( temp, 1, buf );
    temp = m_joinType->InsertItem( 4, ">" );
    m_joinType->SetItemData( temp, 4 );
    buf.Printf( "%s.%s > %s.%s", m_refTable, m_refField, m_origTable, m_origField );
    m_joinType->SetItem( temp, 1, buf );
    temp = m_joinType->InsertItem( 5, "<=" );
    m_joinType->SetItemData( temp, 5 );
    buf.Printf( "%s.%s <= %s.%s", m_refTable, m_refField, m_origTable, m_origField );
    m_joinType->SetItem( temp, 1, buf );
    temp = m_joinType->InsertItem( 6, ">=" );
    m_joinType->SetItemData( temp, 6 );
    buf.Printf( "%s.%s >= %s.%s", m_refTable, m_refField, m_origTable, m_origField );
    m_joinType->SetItem( temp, 1, buf );
    temp = m_joinType->InsertItem( 7, "<>" );
    m_joinType->SetItemData( temp, 7 );
    buf.Printf( "%s.%s <> %s.%s", m_refTable, m_refField, m_origTable, m_origField );
    m_joinType->SetItem( temp, 1, buf );
    m_joinType->SetItemState( m_type,  wxLIST_STATE_SELECTED, wxLIST_STATE_SELECTED );
    m_joinType->SetItemState( m_type, wxLIST_STATE_FOCUSED, wxLIST_STATE_FOCUSED );
    m_joinType->SetColumnWidth( 0, wxLIST_AUTOSIZE );
    m_joinType->SetColumnWidth( 1, wxLIST_AUTOSIZE );
}

void JointType::do_layout()
{
    // begin wxGlade: MyDialog::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer_2 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer_3 = new wxBoxSizer( wxVERTICAL );
    wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer( 2, 2, 5, 5 );
    wxBoxSizer* sizer_4 = new wxBoxSizer( wxVERTICAL );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    grid_sizer_1->Add( m_label, 0, wxEXPAND, 0 );
    grid_sizer_1->Add( m_OK, 0, 0, 0 );
    grid_sizer_1->Add( m_joinType, 1, wxEXPAND, 0 );
    sizer_4->Add( m_Cancel, 0, wxEXPAND, 0 );
    sizer_4->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_4->Add( m_delete, 0, wxEXPAND, 0 );
    sizer_4->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_4->Add( m_help, 0, 0, 0 );
    sizer_4->Add( 5, 5, 0, wxEXPAND, 0 );
    grid_sizer_1->Add( sizer_4, 1, 0, 0 );
    sizer_3->Add( grid_sizer_1, 1, 0, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_2->Add( sizer_3, 1, 0, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    m_panel->SetSizer( sizer_2 );
    sizer_1->Add( m_panel, 1, 0, 0 );
    SetSizer( sizer_1 );
    sizer_1->Fit( this );
    Layout();
    Centre();
    // end wxGlade
}

wxListCtrl *JointType::GetTypeCtrl()
{
    return m_joinType;
}

void JointType::OnListItemActivated(wxCommandEvent &WXUNUSED(event))
{
    EndModal( wxID_OK );
}
