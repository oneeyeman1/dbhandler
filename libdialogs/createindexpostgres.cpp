// -*- C++ -*-
//
// generated by wxGlade 1.1.0 on Fri Apr 18 00:32:05 2025
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
#include <string>
#include <algorithm>
#include "database.h"
#include <wx/wx.h>
#include <wx/image.h>
#include "wx/valnum.h"
#include "wx/spinctrl.h"
#include "createindexpostgres.h"

// begin wxGlade: ::extracode
// end wxGlade



CreateIndexPostgres::CreateIndexPostgres(wxWindow* parent, wxWindowID id, const wxString& title, const wxString &method, const DatabaseTable *table, unsigned long serverVersion):
    wxDialog(parent, id, title)
{
    // begin wxGlade: CreateIndexPostgres::CreateIndexPostgres
    SetTitle( "Advanced options for PostgreSQL" );
    auto sizer_6 = new wxBoxSizer( wxHORIZONTAL );
    m_panel1 = new wxPanel( this, wxID_ANY );
    sizer_6->Add( m_panel1, 1, wxEXPAND, 0 );
    auto sizer_7 = new wxBoxSizer( wxHORIZONTAL );
    sizer_7->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_8 = new wxBoxSizer( wxVERTICAL );
    sizer_7->Add( sizer_8, 0, wxEXPAND, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_9 = new wxBoxSizer( wxVERTICAL );
    sizer_8->Add( sizer_9, 0, wxEXPAND, 0 );
    auto sizer_10 = new wxBoxSizer( wxHORIZONTAL );
    sizer_9->Add( sizer_10, 0, wxEXPAND, 0 );
    m_label1 = new wxStaticText( m_panel1, wxID_ANY, "Method" );
    sizer_10->Add( m_label1, 0, wxEXPAND, 0 );
    sizer_10->Add( 5, 5, 0, wxEXPAND, 0 );
    m_method = new wxStaticText( m_panel1, wxID_ANY, "B-tree" );
    auto font = m_method->GetFont();
    font.MakeBold();
    m_method->SetFont( font );
    m_method->SetLabel( method );
    sizer_10->Add( m_method, 0, wxEXPAND, 0 );
    sizer_9->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_11 = new wxStaticBoxSizer( new wxStaticBox( m_panel1, wxID_ANY, "INCLUDE" ), wxVERTICAL );
    sizer_9->Add( sizer_11, 0, wxEXPAND, 0 );
    m_include = new wxListBox( sizer_11->GetStaticBox(), wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, nullptr, wxLB_MULTIPLE );
    std::vector<TableField *> fields = table->GetFields();
    for( std::vector<TableField *>::iterator it = fields.begin(); it < fields.end(); ++it )
    {
        m_include->Append( (*it)->GetFieldName() );
    }
    sizer_11->Add( m_include, 0, wxEXPAND, 0 );
    sizer_9->Add( 5, 5, 0, wxEXPAND, 0 );
    if( serverVersion >= 15 )
    {
        auto sizer_12 = new wxBoxSizer( wxHORIZONTAL );
        sizer_9->Add( sizer_12, 0, wxEXPAND, 0 );
        m_label3 = new wxStaticText( m_panel1, wxID_ANY, "NULLS" );
        sizer_12->Add( m_label3, 0, wxALIGN_CENTER_VERTICAL, 0 );
        sizer_12->Add( 5, 5, 0, wxEXPAND, 0 );
        m_nulls = new wxCheckBox( m_panel1, wxID_ANY, "DISTINCT" );
        m_nulls->SetValue( true );
        sizer_12->Add( m_nulls, 0, wxEXPAND, 0 );
        sizer_9->Add( 5, 5, 0, 0, 0 );
    }
    auto sizer_13 = new wxStaticBoxSizer( new wxStaticBox(m_panel1, wxID_ANY, "WITH" ), wxHORIZONTAL );
    sizer_9->Add( sizer_13, 1, wxEXPAND, 0 );
    if( method == "btree" || method == "hash" || method == "gist" || method == "spgist" )
    {
        m_label2 = new wxStaticText( m_panel1, wxID_ANY, "FILLFACTOR" );
        sizer_13->Add( m_label2, 0, wxALIGN_CENTER_VERTICAL, 0 );
        sizer_13->Add( 5, 5, 0, wxEXPAND, 0 );
        m_fillFactor = new wxSpinCtrl( m_panel1, wxID_ANY, "90", wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS | wxSP_WRAP, 10, 100, 90 );
        sizer_13->Add( m_fillFactor, 0, wxEXPAND, 0 );
        sizer_13->Add( 5, 5, 0, wxEXPAND, 0 );
    }
    if( method == "btree" && ( serverVersion == 11 || serverVersion == 12 ) )
    {
        m_scaleFactor = new wxSpinCtrlDouble( m_panel1, wxID_ANY, "VACUM_SCALE_FACTOR", wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS | wxSP_WRAP, 0, 10000000000, 0.1 );
        sizer_13->Add( m_scaleFactor, 0, wxEXPAND, 0 );
    }
    if( method == "btree" && serverVersion >= 13 )
    {
        m_deduplcate = new wxCheckBox( m_panel1, wxID_ANY, "DEDUPLICATE_ITEMS" );
        m_deduplcate->SetValue( true );
        sizer_13->Add( m_deduplcate, 0, wxEXPAND, 0 );
    }
    if( method == "gist" )
    {
        m_buffering = new wxCheckBox( m_panel1, wxID_ANY, "BUFFERING", wxDefaultPosition, wxDefaultSize, wxCHK_3STATE | wxCHK_ALLOW_3RD_STATE_FOR_USER );
        m_buffering->Set3StateValue( wxCHK_UNDETERMINED );
        sizer_13->Add( m_buffering, 0, wxEXPAND, 0 );
    }
    if( method == "gin" )
    {
        m_fastUpdate = new wxCheckBox( m_panel1, wxID_ANY, "FAST_UPDATE" );
        m_fastUpdate->SetValue( true );
        sizer_13->Add( m_fastUpdate, 0, wxEXPAND, 0 );
        sizer_13->Add( 5, 5, 0, wxEXPAND, 0 );
        m_label6 = new wxStaticText( m_panel1, wxID_ANY, "PENDING_LIST_LIMIT" );
        sizer_13->Add( m_label6, 0, wxALIGN_CENTER_VERTICAL, 0 );
        sizer_13->Add( 5, 5, 0, wxEXPAND, 0 );
        wxIntegerValidator<int> val( &m_value, wxNUM_VAL_THOUSANDS_SEPARATOR );
        m_pendingList = new wxTextCtrl( m_panel1, wxID_ANY, "4000", wxDefaultPosition, wxDefaultSize, 0L, val );
        sizer_13->Add( m_pendingList, 0, wxEXPAND, 0 );
        sizer_13->Add( 5, 5, 0, wxEXPAND, 0 );
        m_label7 = new wxStaticText( m_panel1, wxID_ANY, "KB" );
        sizer_13->Add( m_label7, 0, wxALIGN_CENTER_VERTICAL, 0 );
    }
    if( method == "brin" )
    {
        m_label8 = new wxStaticText( m_panel1, wxID_ANY, "PAGES_PER_RANGE" );
        sizer_13->Add( m_label8, 0, wxALIGN_CENTER_VERTICAL, 0 );
        sizer_13->Add( 5, 5, 0, wxEXPAND, 0 );
        wxIntegerValidator<int> val1( &m_value1, wxNUM_VAL_THOUSANDS_SEPARATOR );
        m_pagesRange = new wxTextCtrl( m_panel1, wxID_ANY, "128", wxDefaultPosition, wxDefaultSize, 0L, val1 );
        sizer_13->Add( m_pagesRange, 0, wxEXPAND, 0 );
        sizer_13->Add( 5, 5, 0, wxEXPAND, 0 );
        m_autoSummarize = new wxCheckBox( m_panel1, wxID_ANY, "AUTOSUMMARIZE" );
        sizer_13->Add( m_autoSummarize, 0, wxEXPAND, 0 );
    }
    sizer_9->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_14 = new wxBoxSizer( wxHORIZONTAL );
    sizer_9->Add( sizer_14, 1, wxEXPAND, 0 );
    m_label4 = new wxStaticText( m_panel1, wxID_ANY, "TABLESPACE" );
    sizer_14->Add( m_label4, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_14->Add( 5, 5, 0, wxEXPAND, 0 );
    m_tablespace = new wxTextCtrl( m_panel1, wxID_ANY, wxEmptyString );
    sizer_14->Add( m_tablespace, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_9->Add( 5, 5, 0, wxEXPAND, 0 );
    wxBoxSizer* sizer_15 = new wxBoxSizer( wxHORIZONTAL );
    sizer_9->Add( sizer_15, 1, wxEXPAND, 0 );
    m_label5 = new wxStaticText( m_panel1, wxID_ANY, "WHERE" );
    sizer_15->Add( m_label5, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_15->Add( 5, 5, 0, wxEXPAND, 0 );
    m_where = new wxTextCtrl( m_panel1, wxID_ANY, wxEmptyString );
    sizer_15->Add( m_where, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_9->Add( 5, 5, 0, wxEXPAND, 0 );
    auto m_buttonSizer = new wxStdDialogButtonSizer();
    m_buttonSizer->AddButton( new wxButton( m_panel1, wxID_OK, "OK" ) );
    m_buttonSizer->AddButton( new wxButton( m_panel1, wxID_CANCEL, "Cancel" ) );
    m_buttonSizer->AddButton( new wxButton( m_panel1, wxID_HELP, "Help" ) );
    m_buttonSizer->Realize();
    sizer_9->Add( m_buttonSizer, 0, wxEXPAND, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_7->Add( 5, 5, 0, wxEXPAND, 0 );
    
    m_panel1->SetSizer( sizer_7 );
    SetSizer( sizer_6 );
    sizer_6->Fit( this );
    Layout();
    // end wxGlade
    if( m_nulls )
        m_nulls->Bind( wxEVT_CHECKBOX, &CreateIndexPostgres::OnNulls, this );
    m_include->Bind( wxEVT_LISTBOX, &CreateIndexPostgres::OnIncludeFields, this );
}

const wxString &CreateIndexPostgres::GetNullValue() const
{
    if( m_nulls )
        return m_nullsDistinct;
    return wxEmptyString;
}

void CreateIndexPostgres::OnNulls(wxCommandEvent &WXUNUSED(event))
{
    if( m_nulls && m_nulls->GetValue() )
        m_nullsDistinct = "DISTINCT";
    else
        m_nullsDistinct = "NOT DISTINCT";
}

void CreateIndexPostgres::OnIncludeFields(wxCommandEvent &event)
{
    if( event.IsSelection() )
        m_includeFields.push_back( m_include->GetString( m_include->GetSelection() ) );
}
