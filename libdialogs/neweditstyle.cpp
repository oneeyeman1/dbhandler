// -*- C++ -*-
//
// generated by wxGlade 1.1.0 on Sat Dec 14 15:19:51 2024
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
#include <wx/wx.h>

// begin wxGlade: ::dependencies
#include <wx/statline.h>
// end wxGlade
#include "wx/valnum.h"
#include "neweditstyle.h"

// begin wxGlade: ::extracode
// end wxGlade

NewEditFieldStyle::NewEditFieldStyle(wxWindow* parent, bool isNew):
    wxDialog(parent, wxID_ANY, "")
{
    m_value = 0;
    wxIntegerValidator<unsigned int> value( &m_value, 0, 32767, wxNUM_VAL_DEFAULT );
    // begin wxGlade: NewEditFieldStyle::NewEditFieldStyle
    SetTitle( _( "Edit Style" ) );
    auto sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    m_panel = new wxPanel( this, wxID_ANY );
    sizer_1->Add( m_panel, 1, wxEXPAND, 0 );
    auto sizer_2 = new wxBoxSizer( wxHORIZONTAL );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_3 = new wxBoxSizer( wxVERTICAL );
    sizer_2->Add( sizer_3, 0, wxEXPAND, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_4 = new wxBoxSizer( wxVERTICAL );
    sizer_3->Add( sizer_4, 0, wxEXPAND, 0 );
    auto sizer_5 = new wxBoxSizer( wxHORIZONTAL );
    sizer_4->Add( sizer_5, 0, wxEXPAND, 0 );
    m_label1 = new wxStaticText( m_panel, wxID_ANY, _( "Name" ) );
    sizer_5->Add( m_label1, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_5->Add( 5, 5, 0, wxEXPAND, 0 );
    m_name = new wxTextCtrl( m_panel, wxID_ANY, wxEmptyString );
    sizer_5->Add( m_name, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_5->Add( 5, 5, 0, wxEXPAND, 0 );
    m_label2 = new wxStaticText( m_panel, wxID_ANY, _( "Style" ) );
    sizer_5->Add( m_label2, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_5->Add( 5, 5, 0, wxEXPAND, 0 );
    m_style = new wxComboBox( m_panel, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, 0, nullptr, wxCB_DROPDOWN );
    sizer_5->Add( m_style, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_4->Add( 5, 5, 0, wxEXPAND, 0 );
    m_divider = new wxStaticLine( m_panel, wxID_ANY );
    sizer_4->Add( m_divider, 0, wxEXPAND, 0 );
    sizer_4->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_6 = new wxStaticBoxSizer( new wxStaticBox( m_panel, wxID_ANY, _( "Options" ) ), wxHORIZONTAL );
    sizer_4->Add( sizer_6, 0, wxEXPAND, 0 );
    auto sizer_7 = new wxBoxSizer( wxHORIZONTAL );
    sizer_6->Add( sizer_7, 0, wxEXPAND, 0 );
    auto sizer_9 = new wxBoxSizer( wxVERTICAL );
    sizer_7->Add( sizer_9, 0, wxEXPAND, 0 );
    auto sizer_10 = new wxBoxSizer( wxVERTICAL );
    sizer_9->Add( sizer_10, 0, wxEXPAND, 0 );
    auto sizer_12 = new wxBoxSizer( wxHORIZONTAL );
    sizer_10->Add( sizer_12, 0, wxEXPAND, 0 );
    m_label3 = new wxStaticText( sizer_6->GetStaticBox(), wxID_ANY, _( "Limit" ) );
    sizer_12->Add( m_label3, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_12->Add( 5, 5, 0, wxEXPAND, 0 );
    m_limit = new wxTextCtrl( sizer_6->GetStaticBox(), wxID_ANY, ( "0" ), wxDefaultPosition, wxDefaultSize, wxTE_RIGHT, value );
    wxSize size = m_limit->GetSizeFromText( "33333" );
    m_limit->SetMaxLength( 5 );
    m_limit->SetMaxSize( FromDIP( size ) );
    sizer_12->Add( m_limit, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_12->Add( 5, 5, 0, wxEXPAND, 0 );
    wxStaticText* m_label4 = new wxStaticText( sizer_6->GetStaticBox(), wxID_ANY, _( "Case" ) );
    sizer_12->Add( m_label4, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_12->Add( 5, 5, 0, wxEXPAND, 0 );
    const wxString choices[] = 
    {
        _( "Any" ),
        _( "Upper" ),
        _( "Lower" )
    };
    m_case = new wxComboBox( sizer_6->GetStaticBox(), wxID_ANY, "Any", wxDefaultPosition, wxDefaultSize, 3, choices, wxCB_READONLY );
    sizer_12->Add( m_case, 0, 0, 0 );
    sizer_12->Add( 5, 5, 0, wxEXPAND, 0 );
    m_label5 = new wxStaticText( sizer_6->GetStaticBox(), wxID_ANY, _( "Accelerator" ) );
    sizer_12->Add( m_label5, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_12->Add( 5, 5, 0, wxEXPAND, 0 );
    m_accel = new wxTextCtrl( sizer_6->GetStaticBox(), wxID_ANY, wxEmptyString );
    size = m_accel->GetSizeFromText( "ww" );
    m_accel->SetMaxSize( FromDIP( size ) );
    sizer_12->Add( m_accel, 0, 0, 0 );
    sizer_10->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_11 = new wxBoxSizer( wxHORIZONTAL );
    sizer_10->Add( sizer_11, 0, wxEXPAND, 0 );
    m_label6 = new wxStaticText( sizer_6->GetStaticBox(), wxID_ANY, _( "Format" ) );
    sizer_11->Add( m_label6, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_11->Add( 5, 5, 0, 0, 0 );
    m_format = new wxTextCtrl( sizer_6->GetStaticBox(), wxID_ANY, wxEmptyString );
    sizer_11->Add( m_format, 1, wxEXPAND, 0 );
    sizer_9->Add( 5, 5, 0, wxEXPAND, 0 );
    auto grid_sizer_1 = new wxFlexGridSizer( 3, 2, 5, 10 );
    sizer_9->Add( grid_sizer_1, 1, wxEXPAND, 0 );
    m_autoSelection = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Auto Selection" ) );
    grid_sizer_1->Add( m_autoSelection, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_showFocusRect = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Show Focus Rectangle" ) );
    grid_sizer_1->Add( m_showFocusRect, 0, wxALIGN_CENTER_VERTICAL, 0 );
    checkbox_1 = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Display Only" ) );
    grid_sizer_1->Add( checkbox_1, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_emptyIsNULL = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Empty String is NULL" ) );
    grid_sizer_1->Add( m_emptyIsNULL, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_codeTable = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Use Code Table" ) );
    grid_sizer_1->Add( m_codeTable, 0, wxALIGN_CENTER_VERTICAL, 0 );
    m_validateCodeTable = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Validate Using Code Table" ) );
    grid_sizer_1->Add( m_validateCodeTable, 0, wxALIGN_CENTER_VERTICAL, 0 );
    sizer_7->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_8 = new wxBoxSizer( wxVERTICAL );
    sizer_7->Add( sizer_8, 0, wxEXPAND, 0 );
    m_password = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Password" ) );
    sizer_8->Add( m_password, 0, 0, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    m_required = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Required" ) );
    sizer_8->Add( m_required, 0, 0, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    m_horzScroll = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Auto Horz Scroll" ) );
    sizer_8->Add( m_horzScroll, 0, 0, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    m_vertScroll = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Auto Vert Scroll" ) );
    sizer_8->Add( m_vertScroll, 0, 0, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    m_hscrollBar = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Horz ScrollBar" ) );
    sizer_8->Add( m_hscrollBar, 0, 0, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    m_vscrollBar = new wxCheckBox( sizer_6->GetStaticBox(), wxID_ANY, _( "Vert ScrollBar" ) );
    sizer_8->Add( m_vscrollBar, 0, 0, 0 );
    sizer_4->Add( 20, 20, 0, wxEXPAND, 0 );
    m_ok = new wxButton( m_panel, wxID_OK, _( "OK" ) );
    m_cancel = new wxButton( m_panel, wxID_CANCEL, _( "Cancel" ) );
    m_apply = new wxButton( m_panel, wxID_APPLY, _( "Apply" ) );
    m_help = new wxButton( m_panel, wxID_HELP, _( "Help" ) );
    auto buttonSizer = new wxStdDialogButtonSizer();
    buttonSizer->AddButton( m_ok );
    buttonSizer->AddButton( m_cancel );
    buttonSizer->AddButton( m_apply );
    buttonSizer->AddButton( m_help );
    buttonSizer->Realize();
    sizer_4->Add( buttonSizer, 0, wxALIGN_CENTER_HORIZONTAL, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    
    m_panel->SetSizer( sizer_2 );
    SetSizer( sizer_1 );
    sizer_1->Fit( this );
    Layout();
    // end wxGlade
}

