// -*- C++ -*-
//
// generated by wxGlade 1.0.0a7 on Wed Sep 16 03:34:30 2020
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include "wx/bmpcbox.h"
#include "objectproperties.h"
#include "propertypagebase.h"
#include "colorcombobox.h"
#include "designgeneral.h"

// begin wxGlade: ::extracode
// end wxGlade

DesignGeneral::DesignGeneral(wxWindow* parent, DesignOptions options):
    PropertyPageBase(parent, wxID_ANY)
{
    m_isModified = false;
    // begin wxGlade: MyDialog::MyDialog
    auto sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_2 = new wxBoxSizer( wxVERTICAL );
    sizer_1->Add( sizer_2, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    auto m_label1 = new wxStaticText( this, wxID_ANY, _( "&Unit:" ) );
    sizer_2->Add( m_label1, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    const wxString m_units_choices[] = {
        _( "1/1000 centimeter" ),
        _( "1/1000 inch" ),
        _( "Pixel" ),
        _( "Units" )
    };
    m_units = new wxComboBox( this, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 4, m_units_choices, wxCB_DROPDOWN);
    sizer_2->Add( m_units, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    auto m_label2 = new wxStaticText( this, wxID_ANY, _( "&Timer interval:" ) );
    sizer_2->Add( m_label2, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_3 = new wxBoxSizer( wxHORIZONTAL );
    sizer_2->Add( sizer_3, 0, wxEXPAND, 0 );
    m_interval = new wxTextCtrl( this, wxID_ANY, "0" );
    sizer_3->Add( m_interval, 0, wxEXPAND, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    auto m_label3 = new wxStaticText( this, wxID_ANY, _( "miliseconds" ) );
    sizer_3->Add( m_label3, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    auto m_label4 = new wxStaticText( this, wxID_ANY, _( "&Color:" ) );
    sizer_2->Add( m_label4, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    m_color = new CColorComboBox( this, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, 0, NULL, wxCB_DROPDOWN );
    sizer_2->Add( m_color, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    auto sizer_4 = new wxStaticBoxSizer( new wxStaticBox( this, wxID_ANY, _( "Grid" ) ), wxHORIZONTAL );
    sizer_2->Add( sizer_4, 0, wxEXPAND, 0 );
    auto grid_sizer_1 = new wxFlexGridSizer( 2, 2, 5, 5 );
    sizer_4->Add( grid_sizer_1, 0, wxEXPAND, 0 );
    auto sizer_5 = new wxBoxSizer( wxHORIZONTAL );
    grid_sizer_1->Add( sizer_5, 0, wxEXPAND, 0 );
    auto m_label5 = new wxStaticText( this, wxID_ANY, _( "&Display" ) );
    sizer_5->Add( m_label5, 0, wxEXPAND, 0 );
    sizer_5->Add( 5, 5, 0, wxEXPAND, 0 );
    const wxString m_display_choices[] = {
        _( "Display Only" ),
        _( "Off" ),
        _( "On" ),
        _( "Print Only" )
    };
    m_display = new wxComboBox( this, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 4, m_display_choices, wxCB_DROPDOWN );
    sizer_5->Add( m_display, 0, wxEXPAND, 0 );
    m_custommove = new wxCheckBox( this, wxID_ANY, _( "Custom &Moving" ) );
    m_custommove->SetValue( 1 );
    grid_sizer_1->Add( m_custommove, 0, wxEXPAND, 0 );
    m_mouseSelect = new wxCheckBox( this, wxID_ANY, _( "Mouse &Selection" ) );
    m_mouseSelect->SetValue( 1 );
    grid_sizer_1->Add( m_mouseSelect, 0, wxEXPAND, 0 );
    m_rowresize = new wxCheckBox( this, wxID_ANY, _( "&Row Resize" ) );
    grid_sizer_1->Add( m_rowresize, 0, wxEXPAND, 0 );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    
    SetSizer( sizer_1 );
    sizer_1->Fit( this );
    // end wxGlade
    m_units->SetSelection( options.units );
    m_interval->SetValue( wxString::Format( "%d", options.interval ) );
    m_color->SetColourValue( options.colorBackground );
    m_display->SetSelection( options.display );
    m_custommove->SetValue( options.customMove );
    m_mouseSelect->SetValue( options.mouseSelect );
    m_rowresize->SetValue( options.rowResize );
    m_units->Bind( wxEVT_COMBOBOX, &DesignGeneral::Modified, this );
}

void DesignGeneral::Modified(wxCommandEvent &)
{
    m_isModified = true;
}
