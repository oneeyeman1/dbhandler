// -*- C++ -*- generated by wxGlade 0.5 on Sun Feb 10 01:29:26 2008
/***************************************************************************
 *   Copyright (C) 2005 by Igor Korot                                      *
 *   igor@IgorsGentoo                                                      *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifndef FONTPROPERTYPAGE_H
#define FONTPROPERTYPAGE_H

#define MAX_COLORS 16

class CFontNamesComboBox : public wxBitmapComboBox
{
public:
    CFontNamesComboBox(wxWindow *parent, wxWindowID id = wxID_ANY, const wxString &value = wxEmptyString, const wxPoint &pos = wxDefaultPosition, const wxSize &size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = wxCB_SIMPLE|wxCB_SORT);
    ~CFontNamesComboBox();
    int AddFont( LOGFONT *plf, int type );
    virtual wxSize DoGetBestSize() const;
    virtual void DoSetSize( int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO );
private:
    wxBitmap *m_bmp1, *m_bmp2;
};

class CStyleComboBox : public wxComboBox
{
public:
    CStyleComboBox(wxWindow *parent, wxWindowID id = wxID_ANY, const wxString &value = wxEmptyString, const wxPoint &pos = wxDefaultPosition, const wxSize &size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = wxCB_SIMPLE|wxCB_SORT);
    virtual wxSize DoGetBestSize() const;
    virtual void DoSetSize( int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO );
};

class CSizeComboBox : public wxComboBox
{
public:
    CSizeComboBox(wxWindow *parent, wxWindowID id = wxID_ANY, const wxString &value = wxEmptyString, const wxPoint &pos = wxDefaultPosition, const wxSize &size = wxDefaultSize, int n = 0, const wxString choices[] = NULL, long style = wxCB_SIMPLE|wxCB_SORT);
    int AddSize(int size, int lfHeight);
    LONG GetFontHeight();
    virtual wxSize DoGetBestSize() const;
    virtual void DoSetSize( int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO );
private:
    int m_cyppi;
};

class MyFontEnumerator : public wxFontEnumerator
{
public:
	bool GotAny() const { return !m_facenames.IsEmpty(); }
	const wxArrayString& GetFacenames() const { return m_facenames; }

protected:
	virtual bool OnFacename(const wxString& facename)
	{
		m_facenames.Add(facename);
		return true;
	}

private:
	wxArrayString m_facenames;
};

class WXEXPORT CFontPropertyPage: public CFontPropertyPageBase
{
public:
    CFontPropertyPage(wxWindow* parent, FontPropertyPage &font, bool colorEnabled, int id=wxID_ANY, const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize, long style=0);
    ~CFontPropertyPage();
    void SetFont(const std::wstring &name, int size, bool italic, bool bold, bool underline, bool strikethrough);
    virtual FontPropertyPage &GetFont() wxOVERRIDE;
    void GetData(void *data);
    void FillFacenameList();
    void FillSizeList();
    void UpdateSampleFont();
    void OnChangeFont(wxCommandEvent &event);
protected:
    wxStaticText *itemStaticText6;
    CFontNamesComboBox *itemChoice7;
    wxStaticText *itemStaticText9;
    CStyleComboBox *itemChoice10;
    wxStaticText *itemStaticText18;
    CSizeComboBox *itemChoice19;
    wxCheckBox *itemCheckBox1;
    wxCheckBox *itemCheckBox2;
    wxStaticBox *itemStaticBox1;
    wxStaticBox *itemStaticBox2;
    wxStaticText *itemStaticText15;
    CColorComboBox *itemChoice16;
    wxStaticText *itemStaticText23;
    CColorComboBox *itemChoice17;
//	wxFontPreviewer *itemWindow24;
    wxFontPreviewer *itemWindow24;
    wxStaticText *itemStaticText30;
#ifdef __WXMSW__
    static int CALLBACK EnumFontFamiliesCallback(ENUMLOGFONT *lpelf, NEWTEXTMETRIC *, int FontType, LPARAM lParam);
    static int CALLBACK EnumFontFamiliesCallback2(ENUMLOGFONT *lpelf, NEWTEXTMETRIC *, int FontType, LPARAM lParam);
#endif
private:
    void set_properties();
    void do_layout();
//#ifdef __WXMSW__
//	DWORD m_nStyles;
//	DWORD m_nCurrentStyle;
//	DWORD m_nActualStyle;
//#else
    unsigned long m_nStyles;
    unsigned long m_nCurrentStyle;
    unsigned long m_nActualStyle;
//#endif
    bool m_bUnderline, m_bStrikethrough;
    wxString m_fontSize, m_fontName;
    wxColour m_textStr, m_backgroundStr;
    wxColour m_text, m_background;
};

#endif // FONTPROPERTYPAGE_H
