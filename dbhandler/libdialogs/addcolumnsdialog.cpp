// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif

#include <vector>
#include <string>
#include "dialogs.h"
#include "addcolumnsdialog.h"

AddColumnsDialog::AddColumnsDialog(wxWindow *parent, int type, const wxPoint &pos, const std::vector<std::wstring> &fields, const wxString &dbType, const wxString &dbSubtype, const std::vector<QueryArguments> &args) : wxDialog( parent, wxID_ANY, "", wxDefaultPosition, wxDefaultSize, 0 )
{
    m_pos = pos;
    m_dbType = dbType;
    m_dbSubtype = dbSubtype;
    m_type = type;
    m_allFields = fields;
    m_args = args;
    // begin wxGlade: MyDialog::MyDialog
    m_panel = new wxPanel( this, wxID_ANY );
    m_fields = new wxListBox( m_panel, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, NULL, wxLB_SINGLE );
    m_paste = new wxButton( m_panel, wxID_OK, _( "Paste" ) );
    m_paste->SetDefault();
    m_cancel = new wxButton( m_panel, wxID_CANCEL, _( "Cancel" ) );
    set_properties();
    do_layout();
    // end wxGlade
    m_paste->Bind( wxEVT_UPDATE_UI, &AddColumnsDialog::OnPasteUpdateUI, this );
    m_fields->Bind( wxEVT_LISTBOX_DCLICK, &AddColumnsDialog::OnFieldsDoubleClick, this );
}

AddColumnsDialog::~AddColumnsDialog(void)
{
}

void AddColumnsDialog::set_properties()
{
    m_paste->Enable( false );
    m_paste->SetDefault();
    if( m_type == 2 )
    {
        if( ( m_dbType == "ODBC" && m_dbSubtype == "Sybase SQL Anywhere ") || m_dbType == "Sybase SQL Anywhere" )
        {
            m_fields->Append( "abs()" );
            m_fields->Append( "avg()" );
            m_fields->Append( "count()" );
            m_fields->Append( "date()" );
            m_fields->Append( "dateformat()" );
            m_fields->Append( "datetime()" );
            m_fields->Append( "day()" );
            m_fields->Append( "days()" );
            m_fields->Append( "dow()" );
            m_fields->Append( "hour()" );
            m_fields->Append( "hours()" );
            m_fields->Append( "ifnull()" );
            m_fields->Append( "isnull()" );
            m_fields->Append( "length()" );
            m_fields->Append( "list()" );
            m_fields->Append( "max()" );
            m_fields->Append( "min()" );
            m_fields->Append( "minute()" );
            m_fields->Append( "minutes()" );
            m_fields->Append( "mod()" );
            m_fields->Append( "month()" );
            m_fields->Append( "months()" );
            m_fields->Append( "now(*)" );
            m_fields->Append( "number(*)" );
            m_fields->Append( "remainder()" );
            m_fields->Append( "second()" );
            m_fields->Append( "seconds()" );
            m_fields->Append( "similar()" );
            m_fields->Append( "soundex()" );
            m_fields->Append( "string()" );
            m_fields->Append( "substr()" );
            m_fields->Append( "sum()" );
            m_fields->Append( "today(*)" );
            m_fields->Append( "weeks()" );
            m_fields->Append( "year()" );
            m_fields->Append( "years()" );
            m_fields->Append( "ymd()" );
        }
        if( ( m_dbType == "ODBC" && m_dbSubtype == "PostgreSQL" ) || m_dbType == "PostgreSQL" )
        {
            m_fields->Append( "abbrev" );
            m_fields->Append( "abs" );
            m_fields->Append( "acos" );
            m_fields->Append( "age" );
            m_fields->Append( "area" );
            m_fields->Append( "array_agg" );
            m_fields->Append( "array_append" );
            m_fields->Append( "array_cat" );
            m_fields->Append( "array_ndims" );
            m_fields->Append( "array_dims" );
            m_fields->Append( "array_fill" );
            m_fields->Append( "array_length" );
            m_fields->Append( "array_lower" );
            m_fields->Append( "array_prepend" );
            m_fields->Append( "array_to_string" );
            m_fields->Append( "array_upper" );
            m_fields->Append( "ascii" );
            m_fields->Append( "asin" );
            m_fields->Append( "atan" );
            m_fields->Append( "atan2" );
            m_fields->Append( "avg" );
            m_fields->Append( "bit_and" );
            m_fields->Append( "bit_length" );
            m_fields->Append( "bit_or" );
            m_fields->Append( "box" );
            m_fields->Append( "broadcast" );
            m_fields->Append( "btrim" );
            m_fields->Append( "cbrt" );
            m_fields->Append( "ceil" );
            m_fields->Append( "ceiling" );
            m_fields->Append( "center" );
            m_fields->Append( "char_length" );
            m_fields->Append( "chr" );
            m_fields->Append( "circle" );
            m_fields->Append( "clock_timestamp" );
            m_fields->Append( "COALESCE" );
            m_fields->Append( "concat" );
            m_fields->Append( "convert" );
            m_fields->Append( "convert_from" );
            m_fields->Append( "convert_to" );
            m_fields->Append( "corr" );
            m_fields->Append( "cos" );
            m_fields->Append( "cot" );
            m_fields->Append( "count" );
            m_fields->Append( "covar_pop" );
            m_fields->Append( "covar_samp" );
            m_fields->Append( "cume_dist" );
            m_fields->Append( "current_catalog" );
            m_fields->Append( "current_database" );
            m_fields->Append( "current_date" );
            m_fields->Append( "current_query" );
            m_fields->Append( "current_schema" );
            m_fields->Append( "current_schemas" );
            m_fields->Append( "current_time" );
            m_fields->Append( "current_timestamp" );
            m_fields->Append( "current_user" );
            m_fields->Append( "currval" );
            m_fields->Append( "cursor_to_xml" );
            m_fields->Append( "date_part" );
            m_fields->Append( "date_trunc" );
            m_fields->Append( "decode" );
            m_fields->Append( "degrees" );
            m_fields->Append( "dence_rank" );
            m_fields->Append( "diameter" );
            m_fields->Append( "div" );
            m_fields->Append( "encode" );
            m_fields->Append( "enum_first" );
            m_fields->Append( "enum_last" );
            m_fields->Append( "enum_range" );
            m_fields->Append( "every" );
            m_fields->Append( "exp" );
            m_fields->Append( "extract" );
            m_fields->Append( "family" );
            m_fields->Append( "first_value" );
            m_fields->Append( "floor" );
            m_fields->Append( "format" );
            m_fields->Append( "generate_series" );
            m_fields->Append( "generate_subscripts" );
            m_fields->Append( "get_bit" );
            m_fields->Append( "get_byte" );
            m_fields->Append( "get_current_ts_config" );
            m_fields->Append( "GREATEST" );
            m_fields->Append( "height" );
            m_fields->Append( "host" );
            m_fields->Append( "hostmask" );
            m_fields->Append( "inet_client_addr" );
            m_fields->Append( "inet_client_port" );
            m_fields->Append( "inet_server_addr" );
            m_fields->Append( "inet_server_port" );
            m_fields->Append( "initcap" );
            m_fields->Append( "isclosed" );
            m_fields->Append( "isfinite" );
            m_fields->Append( "isopen" );
            m_fields->Append( "justify_days" );
            m_fields->Append( "justify_hours" );
            m_fields->Append( "justify_interval" );
            m_fields->Append( "lag" );
            m_fields->Append( "last_value" );
            m_fields->Append( "lastval" );
            m_fields->Append( "lead" );
            m_fields->Append( "LEAST" );
            m_fields->Append( "left" );
            m_fields->Append( "length" );
            m_fields->Append( "ln" );
            m_fields->Append( "localtime" );
            m_fields->Append( "localtimestamp" );
            m_fields->Append( "log" );
            m_fields->Append( "lower" );
            m_fields->Append( "lpad" );
            m_fields->Append( "lseg" );
            m_fields->Append( "ltrim" );
            m_fields->Append( "masklen" );
            m_fields->Append( "max" );
            m_fields->Append( "md5" );
            m_fields->Append( "min" );
            m_fields->Append( "mod" );
            m_fields->Append( "netmask" );
            m_fields->Append( "network" );
            m_fields->Append( "nextval" );
            m_fields->Append( "now" );
            m_fields->Append( "npoints" );
            m_fields->Append( "nth_value" );
            m_fields->Append( "ntile" );
            m_fields->Append( "NULLIF" );
            m_fields->Append( "numnode" );
            m_fields->Append( "octet" );
            m_fields->Append( "octet_length" );
            m_fields->Append( "overlay" );
            m_fields->Append( "path" );
            m_fields->Append( "pclose" );
            m_fields->Append( "percent_rank" );
            m_fields->Append( "pg_backend_pid" );
            m_fields->Append( "pg_client_encoding" );
            m_fields->Append( "pg_conf_load_time" );
            m_fields->Append( "pg_is_other_temp_schema" );
            m_fields->Append( "pg_listening_channel" );
            m_fields->Append( "pg_my_temp_schema" );
            m_fields->Append( "pg_postmaster_start_time" );
            m_fields->Append( "pi" );
            m_fields->Append( "plainto_tsquery" );
            m_fields->Append( "point" );
            m_fields->Append( "polygon" );
            m_fields->Append( "popen" );
            m_fields->Append( "position" );
            m_fields->Append( "power" );
            m_fields->Append( "query_to_xml" );
            m_fields->Append( "querytree" );
            m_fields->Append( "quote_ident" );
            m_fields->Append( "quote_literal" );
            m_fields->Append( "quote_nullable" );
            m_fields->Append( "radians" );
            m_fields->Append( "radius" );
            m_fields->Append( "random" );
            m_fields->Append( "rank" );
            m_fields->Append( "regexp_matches" );
            m_fields->Append( "regexp_replace" );
            m_fields->Append( "regexp_split_to_array" );
            m_fields->Append( "regexp_split_to_table" );
            m_fields->Append( "regr_avgx" );
            m_fields->Append( "regr_avgy" );
            m_fields->Append( "regr_count" );
            m_fields->Append( "regr_intercept" );
            m_fields->Append( "regr_r2" );
            m_fields->Append( "regr_slcpe" );
            m_fields->Append( "regr_sxx" );
            m_fields->Append( "regr_sxy" );
            m_fields->Append( "regr_syy" );
            m_fields->Append( "repeat" );
            m_fields->Append( "replace" );
            m_fields->Append( "reverse" );
            m_fields->Append( "right" );
            m_fields->Append( "round" );
            m_fields->Append( "row_number" );
            m_fields->Append( "rpad" );
            m_fields->Append( "rtrim" );
            m_fields->Append( "session_user" );
            m_fields->Append( "set_bit" );
            m_fields->Append( "set_byte" );
            m_fields->Append( "set_masklen" );
            m_fields->Append( "setseed" );
            m_fields->Append( "setval" );
            m_fields->Append( "setweight" );
            m_fields->Append( "sign" );
            m_fields->Append( "sin" );
            m_fields->Append( "split_part" );
            m_fields->Append( "sqrt" );
            m_fields->Append( "statement_timestamp" );
            m_fields->Append( "stddev" );
            m_fields->Append( "stddev_pop" );
            m_fields->Append( "stddev_samp" );
            m_fields->Append( "string_agg" );
            m_fields->Append( "string_to_array" );
            m_fields->Append( "strip" );
            m_fields->Append( "strpos" );
            m_fields->Append( "substring" );
            m_fields->Append( "sum" );
            m_fields->Append( "table_to_xml" );
            m_fields->Append( "tan" );
            m_fields->Append( "text" );
            m_fields->Append( "timeofday" );
            m_fields->Append( "to_ascii" );
            m_fields->Append( "to_char" );
            m_fields->Append( "to_date" );
            m_fields->Append( "to_hex" );
            m_fields->Append( "to_number" );
            m_fields->Append( "to_timestamp" );
            m_fields->Append( "to_tsquery" );
            m_fields->Append( "to_tsvector" );
            m_fields->Append( "transaction_timestamp" );
            m_fields->Append( "translate" );
            m_fields->Append( "trim" );
            m_fields->Append( "trunc" );
            m_fields->Append( "ts_headline" );
            m_fields->Append( "ts_rank" );
            m_fields->Append( "ts_rank_cd" );
            m_fields->Append( "ts_rewrite" );
            m_fields->Append( "tsvector_update_trigger" );
            m_fields->Append( "tsvector_update_trigger_column" );
            m_fields->Append( "unnest" );
            m_fields->Append( "upper" );
            m_fields->Append( "user" );
            m_fields->Append( "var_pop" );
            m_fields->Append( "var_samp" );
            m_fields->Append( "variance" );
            m_fields->Append( "version" );
            m_fields->Append( "width" );
            m_fields->Append( "xml_is_well_formed" );
            m_fields->Append( "xml_is_well_formed_content" );
            m_fields->Append( "xml_is_well_formed_document" );
            m_fields->Append( "xmlagg" );
            m_fields->Append( "xmlcomment" );
            m_fields->Append( "xmlconcat" );
            m_fields->Append( "xmlelement" );
            m_fields->Append( "xmlforest" );
            m_fields->Append( "xpath" );
            m_fields->Append( "xpath_exists" );
            m_fields->Append( "xmlpi" );
            m_fields->Append( "xmlroot" );
        }
        if( ( m_dbType == "ODBC" && m_dbSubtype == "MySQL" ) || m_dbType == "MySQL" )
        {
            m_fields->Append( "abs" );
            m_fields->Append( "acos" );
            m_fields->Append( "adddate" );
            m_fields->Append( "addtime" );
            m_fields->Append( "aes_decrypt" );
            m_fields->Append( "aes_encrypt" );
            m_fields->Append( "any_value" );
            m_fields->Append( "area" );
            m_fields->Append( "as_binary" );
            m_fields->Append( "ascii" );
            m_fields->Append( "asin" );
            m_fields->Append( "assymmetric_decrypt" );
            m_fields->Append( "assymmetric_derive" );
            m_fields->Append( "assymmetric_encrypt" );
            m_fields->Append( "assymmetric_sign" );
            m_fields->Append( "assymmetric_verify" );
            m_fields->Append( "atan" );
            m_fields->Append( "atan2" );
            m_fields->Append( "avg" );
            m_fields->Append( "benchmark" );
            m_fields->Append( "bin" );
            m_fields->Append( "binary" );
            m_fields->Append( "bit_and" );
            m_fields->Append( "bit_count" );
            m_fields->Append( "bit_length" );
            m_fields->Append( "bit_or" );
            m_fields->Append( "bit_xor" );
            m_fields->Append( "box" );
            m_fields->Append( "broadcast" );
            m_fields->Append( "btrim" );
            m_fields->Append( "buffer" );
            m_fields->Append( "cast" );
            m_fields->Append( "ceil" );
            m_fields->Append( "ceiling" );
            m_fields->Append( "centroid" );
            m_fields->Append( "char" );
            m_fields->Append( "char_length" );
            m_fields->Append( "character_length" );
            m_fields->Append( "charset" );
            m_fields->Append( "coalesce" );
            m_fields->Append( "coercibility" );
            m_fields->Append( "collation" );
            m_fields->Append( "compress" );
            m_fields->Append( "concat" );
            m_fields->Append( "concat_ws" );
            m_fields->Append( "connection_id" );
            m_fields->Append( "contains" );
            m_fields->Append( "conv" );
            m_fields->Append( "convert" );
            m_fields->Append( "convert_tz" );
            m_fields->Append( "convexhull" );
            m_fields->Append( "cos" );
            m_fields->Append( "cot" );
            m_fields->Append( "count" );
            m_fields->Append( "crc32" );
            m_fields->Append( "create_assymmetric_priv_key" );
            m_fields->Append( "create_assymmetric_pub_key" );
            m_fields->Append( "create_dh_parameters" );
            m_fields->Append( "create_digest" );
            m_fields->Append( "crosses" );
            m_fields->Append( "curdate" );
            m_fields->Append( "current_date" );
            m_fields->Append( "current_time" );
            m_fields->Append( "current_timestamp" );
            m_fields->Append( "current_user" );
            m_fields->Append( "curtime" );
            m_fields->Append( "database" );
            m_fields->Append( "date" );
            m_fields->Append( "date_add" );
            m_fields->Append( "date_format" );
            m_fields->Append( "date_sub" );
            m_fields->Append( "datediff" );
            m_fields->Append( "day" );
            m_fields->Append( "dayname" );
            m_fields->Append( "dayofmonth" );
            m_fields->Append( "dayofweek" );
            m_fields->Append( "dayofyear" );
            m_fields->Append( "decode" );
            m_fields->Append( "default" );
            m_fields->Append( "degrees" );
            m_fields->Append( "des_decrypt" );
            m_fields->Append( "des_encrypt" );
            m_fields->Append( "dimension" );
            m_fields->Append( "disjoint" );
            m_fields->Append( "distance" );
            m_fields->Append( "div" );
            m_fields->Append( "elt" );
            m_fields->Append( "encode" );
            m_fields->Append( "encrypt" );
            m_fields->Append( "endpoint" );
            m_fields->Append( "envelope" );
            m_fields->Append( "equals" );
            m_fields->Append( "exp" );
            m_fields->Append( "export_set" );
            m_fields->Append( "exteriorring" );
            m_fields->Append( "extract" );
            m_fields->Append( "extractvalue" );
            m_fields->Append( "field" );
            m_fields->Append( "find_in_set" );
            m_fields->Append( "floor" );
            m_fields->Append( "format" );
            m_fields->Append( "found_rows" );
            m_fields->Append( "from_base64" );
            m_fields->Append( "from_days" );
            m_fields->Append( "from_unixtime" );
            m_fields->Append( "geomcollfromtext" );
            m_fields->Append( "geomcollfromwkb" );
            m_fields->Append( "geometrycollection" );
            m_fields->Append( "geometryn" );
            m_fields->Append( "geometrytype" );
            m_fields->Append( "geomfromtext" );
            m_fields->Append( "geomfromwkb" );
            m_fields->Append( "get_format" );
            m_fields->Append( "get_lock" );
            m_fields->Append( "glength" );
            m_fields->Append( "greatest" );
            m_fields->Append( "group_concat" );
            m_fields->Append( "gtid_subset" );
            m_fields->Append( "gtid_subtract" );
            m_fields->Append( "hex" );
            m_fields->Append( "hour" );
            m_fields->Append( "if" );
            m_fields->Append( "ifnull" );
            m_fields->Append( "in" );
            m_fields->Append( "inet_aton" );
            m_fields->Append( "inet_ntoa" );
            m_fields->Append( "inet6_aton" );
            m_fields->Append( "inet6_ntoa" );
            m_fields->Append( "insert" );
            m_fields->Append( "instr" );
            m_fields->Append( "interiorringn" );
            m_fields->Append( "intersects" );
            m_fields->Append( "interval" );
            m_fields->Append( "is_free_lock" );
            m_fields->Append( "is_ipv4" );
            m_fields->Append( "is_ipv4_compat" );
            m_fields->Append( "is_ipv4_mapped" );
            m_fields->Append( "is_ipv6" );
            m_fields->Append( "isclosed" );
            m_fields->Append( "isempty" );
            m_fields->Append( "isnull" );
            m_fields->Append( "issimple" );
            m_fields->Append( "json_append" );
            m_fields->Append( "json_array" );
            m_fields->Append( "json_array_append" );
            m_fields->Append( "json_array_insert" );
            m_fields->Append( "json_contains" );
            m_fields->Append( "json_contains_path" );
            m_fields->Append( "json_depth" );
            m_fields->Append( "json_extract" );
            m_fields->Append( "json_insert" );
            m_fields->Append( "json_keys" );
            m_fields->Append( "json_length" );
            m_fields->Append( "json_merge" );
            m_fields->Append( "json_merge_preserve" );
            m_fields->Append( "json_object" );
            m_fields->Append( "json_quote" );
            m_fields->Append( "json_remove" );
            m_fields->Append( "json_replace" );
            m_fields->Append( "json_search" );
            m_fields->Append( "json_set" );
            m_fields->Append( "json_type" );
            m_fields->Append( "json_unquote" );
            m_fields->Append( "json_valid" );
            m_fields->Append( "last_day" );
            m_fields->Append( "last_insert_id" );
            m_fields->Append( "lcase" );
            m_fields->Append( "least" );
            m_fields->Append( "left" );
            m_fields->Append( "length" );
            m_fields->Append( "linefromtext" );
            m_fields->Append( "linefromwkb" );
            m_fields->Append( "linestring" );
            m_fields->Append( "ln" );
            m_fields->Append( "load_file" );
            m_fields->Append( "localtime" );
            m_fields->Append( "localtimestamp" );
            m_fields->Append( "locate" );
            m_fields->Append( "log" );
            m_fields->Append( "log10" );
            m_fields->Append( "log2" );
            m_fields->Append( "lower" );
            m_fields->Append( "lpad" );
            m_fields->Append( "ltrim" );
            m_fields->Append( "make_set" );
            m_fields->Append( "makedate" );
            m_fields->Append( "maketime" );
            m_fields->Append( "master_pos_wait" );
            m_fields->Append( "match" );
            m_fields->Append( "max" );
            m_fields->Append( "mbrcontains" );
            m_fields->Append( "mbrcoveredby" );
            m_fields->Append( "mbrcovers" );
            m_fields->Append( "mbrdisjoint" );
            m_fields->Append( "mbrequal" );
            m_fields->Append( "mbrequals" );
            m_fields->Append( "mbrintersects" );
            m_fields->Append( "mbroverlaps" );
            m_fields->Append( "mbrtouches" );
            m_fields->Append( "mbrwithin" );
            m_fields->Append( "md5" );
            m_fields->Append( "microsecond" );
            m_fields->Append( "mid" );
            m_fields->Append( "min" );
            m_fields->Append( "minute" );
            m_fields->Append( "mlinefromtext" );
            m_fields->Append( "mlinefromwkb" );
            m_fields->Append( "mod" );
            m_fields->Append( "month" );
            m_fields->Append( "monthname" );
            m_fields->Append( "mpointfromtext" );
            m_fields->Append( "mpointfromwkb" );
            m_fields->Append( "mpolyfromtext" );
            m_fields->Append( "mpolyfromtwkb" );
            m_fields->Append( "multippoint" );
            m_fields->Append( "multipolygon" );
            m_fields->Append( "name_const" );
            m_fields->Append( "not_in" );
            m_fields->Append( "now" );
            m_fields->Append( "nullif" );
            m_fields->Append( "numgeometries" );
            m_fields->Append( "numinteriorrings" );
            m_fields->Append( "numpoints" );
            m_fields->Append( "oct" );
            m_fields->Append( "octet_length" );
            m_fields->Append( "old_password" );
            m_fields->Append( "ord" );
            m_fields->Append( "overlaps" );
            m_fields->Append( "password" );
            m_fields->Append( "period_add" );
            m_fields->Append( "period_diff" );
            m_fields->Append( "pi" );
            m_fields->Append( "point" );
            m_fields->Append( "pointfromtext" );
            m_fields->Append( "pointfromwkb" );
            m_fields->Append( "pointn" );
            m_fields->Append( "polyfromtext" );
            m_fields->Append( "polyfromwkb" );
            m_fields->Append( "polygon" );
            m_fields->Append( "position" );
            m_fields->Append( "pow" );
            m_fields->Append( "power" );
            m_fields->Append( "procedure_analyze" );
            m_fields->Append( "quarter" );
            m_fields->Append( "quote" );
            m_fields->Append( "radians" );
            m_fields->Append( "rand" );
            m_fields->Append( "random_bytes" );
            m_fields->Append( "release_all_locks" );
            m_fields->Append( "release_lock" );
            m_fields->Append( "repeat" );
            m_fields->Append( "replace" );
            m_fields->Append( "reverse" );
            m_fields->Append( "right" );
            m_fields->Append( "round" );
            m_fields->Append( "row_count" );
            m_fields->Append( "rpad" );
            m_fields->Append( "rtrim" );
            m_fields->Append( "schema" );
            m_fields->Append( "sec_to_time" );
            m_fields->Append( "second" );
            m_fields->Append( "session_user" );
            m_fields->Append( "sha1" );
            m_fields->Append( "sha2" );
            m_fields->Append( "sign" );
            m_fields->Append( "sin" );
            m_fields->Append( "sleep" );
            m_fields->Append( "soundex" );
            m_fields->Append( "sounds_like" );
            m_fields->Append( "space" );
            m_fields->Append( "sqrt" );
            m_fields->Append( "srid" );
            m_fields->Append( "st_area" );
            m_fields->Append( "st_asbinary" );
            m_fields->Append( "st_asgeojson" );
            m_fields->Append( "st_astext" );
            m_fields->Append( "st_buffer" );
            m_fields->Append( "st_buffer_strategy" );
            m_fields->Append( "st_centroid" );
            m_fields->Append( "st_contains" );
            m_fields->Append( "st_convexhull" );
            m_fields->Append( "st_crossess" );
            m_fields->Append( "st_difference" );
            m_fields->Append( "st_dimension" );
            m_fields->Append( "st_disjoint" );
            m_fields->Append( "st_distance" );
            m_fields->Append( "st_distance_sphere" );
            m_fields->Append( "st_endpoint" );
            m_fields->Append( "st_envelope" );
            m_fields->Append( "st_equals" );
            m_fields->Append( "st_exteriorring" );
            m_fields->Append( "st_geohash" );
            m_fields->Append( "st_geomcollfromtext" );
            m_fields->Append( "st_geometrycollectionfromtext" );
            m_fields->Append( "st_geomcollfromtext" );
            m_fields->Append( "st_geomcollfromwkb" );
            m_fields->Append( "st_geometrycollectionfromwkb" );
            m_fields->Append( "st_geometryn" );
            m_fields->Append( "st_geometrytype" );
            m_fields->Append( "st_geomfromgeojson" );
            m_fields->Append( "st_geomfromtext" );
            m_fields->Append( "st_geomfromwkb" );
            m_fields->Append( "st_interiorringn" );
            m_fields->Append( "st_intersection" );
            m_fields->Append( "st_intersects" );
            m_fields->Append( "st_isclosed" );
            m_fields->Append( "st_isempty" );
            m_fields->Append( "st_issimple" );
            m_fields->Append( "st_isvalid" );
            m_fields->Append( "st_lastfromgeohash" );
            m_fields->Append( "st_length" );
            m_fields->Append( "st_linefromtext" );
            m_fields->Append( "st_linefromwkb" );
            m_fields->Append( "st_longfromgeohash" );
            m_fields->Append( "st_makeenvelope" );
            m_fields->Append( "st_mlinefromtext" );
            m_fields->Append( "st_mlinefromwkb" );
            m_fields->Append( "st_mpointfromtext" );
            m_fields->Append( "st_mpointfromwkb" );
            m_fields->Append( "st_mpolyfromtext" );
            m_fields->Append( "st_mpolyfromwkb" );
            m_fields->Append( "st_numgeometries" );
            m_fields->Append( "st_numinteriorring" );
            m_fields->Append( "st_numpoints" );
            m_fields->Append( "st_overlaps" );
            m_fields->Append( "st_pointfromgeohash" );
            m_fields->Append( "st_pointfromtext" );
            m_fields->Append( "st_pointfromwkb" );
            m_fields->Append( "st_pointn" );
            m_fields->Append( "st_polyfromtext" );
            m_fields->Append( "st_polyfromwkb" );
            m_fields->Append( "st_simplify" );
            m_fields->Append( "st_srid" );
            m_fields->Append( "st_startpoint" );
            m_fields->Append( "st_symdifference" );
            m_fields->Append( "st_touches" );
            m_fields->Append( "st_union" );
            m_fields->Append( "st_validate" );
            m_fields->Append( "st_within" );
            m_fields->Append( "st_x" );
            m_fields->Append( "st_y" );
            m_fields->Append( "startpoint" );
            m_fields->Append( "std" );
            m_fields->Append( "stddev" );
            m_fields->Append( "stddev_pop" );
            m_fields->Append( "stddev_samp" );
            m_fields->Append( "str_to_date" );
            m_fields->Append( "strcmp" );
            m_fields->Append( "subdate" );
            m_fields->Append( "substr" );
            m_fields->Append( "substring" );
            m_fields->Append( "substring_index" );
            m_fields->Append( "subtime" );
            m_fields->Append( "sum" );
            m_fields->Append( "sysdate" );
            m_fields->Append( "system_user" );
            m_fields->Append( "tan" );
            m_fields->Append( "time" );
            m_fields->Append( "time_format" );
            m_fields->Append( "time_to_sec" );
            m_fields->Append( "timediff" );
            m_fields->Append( "timestamp" );
            m_fields->Append( "timestampadd" );
            m_fields->Append( "timestampdiff" );
            m_fields->Append( "to_base64" );
            m_fields->Append( "to_days" );
            m_fields->Append( "to_seconds" );
            m_fields->Append( "touches" );
            m_fields->Append( "trim" );
            m_fields->Append( "truncate" );
            m_fields->Append( "ucase" );
            m_fields->Append( "uncompress" );
            m_fields->Append( "uncompress_length" );
            m_fields->Append( "unhex" );
            m_fields->Append( "unix_timestamp" );
            m_fields->Append( "updatexml" );
            m_fields->Append( "upper" );
            m_fields->Append( "user" );
            m_fields->Append( "utc_date" );
            m_fields->Append( "utc_time" );
            m_fields->Append( "utc_timestamp" );
            m_fields->Append( "uuid" );
            m_fields->Append( "uuid_short" );
            m_fields->Append( "validate_password_strength" );
            m_fields->Append( "values" );
            m_fields->Append( "var_pop" );
            m_fields->Append( "var_samp" );
            m_fields->Append( "variance" );
            m_fields->Append( "version" );
            m_fields->Append( "wait_for_executed_gtid_set" );
            m_fields->Append( "wait_until_sql_thread_after_gtids" );
            m_fields->Append( "week" );
            m_fields->Append( "weekday" );
            m_fields->Append( "weekofyear" );
            m_fields->Append( "weight_string" );
            m_fields->Append( "within" );
            m_fields->Append( "x" );
            m_fields->Append( "xor" );
            m_fields->Append( "y" );
            m_fields->Append( "year" );
            m_fields->Append( "yearweek" );
        }
        if( m_dbType == "SQLite" )
        {
            m_fields->Append( "abs()" );
            m_fields->Append( "avg()" );
            m_fields->Append( "changes" );
            m_fields->Append( "char" );
            m_fields->Append( "coalesce" );
            m_fields->Append( "count()" );
            m_fields->Append( "date()" );
            m_fields->Append( "datetime()" );
            m_fields->Append( "glob" );
            m_fields->Append( "group_concat" );
            m_fields->Append( "hex" );
            m_fields->Append( "ifnull()" );
            m_fields->Append( "instr" );
            m_fields->Append( "julianday" );
            m_fields->Append( "last_insert_rowid" );
            m_fields->Append( "length()" );
            m_fields->Append( "like" );
            m_fields->Append( "likelihood" );
            m_fields->Append( "likely" );
            m_fields->Append( "load_extension" );
            m_fields->Append( "lower" );
            m_fields->Append( "ltrim" );
            m_fields->Append( "max()" );
            m_fields->Append( "min()" );
            m_fields->Append( "nullif" );
            m_fields->Append( "printf" );
            m_fields->Append( "quote" );
            m_fields->Append( "random" );
            m_fields->Append( "randomblob" );
            m_fields->Append( "replace" );
            m_fields->Append( "round" );
            m_fields->Append( "rtrim" );
            m_fields->Append( "soundex()" );
            m_fields->Append( "sqlite_compileoption_get" );
            m_fields->Append( "sqlite_compileoption_used" );
            m_fields->Append( "sqlite_source_id" );
            m_fields->Append( "sqlite_version" );
            m_fields->Append( "strftime" );
            m_fields->Append( "substr()" );
            m_fields->Append( "sum()" );
            m_fields->Append( "time" );
            m_fields->Append( "total" );
            m_fields->Append( "total_changes" );
            m_fields->Append( "trim" );
            m_fields->Append( "typeof" );
            m_fields->Append( "unicode" );
            m_fields->Append( "unlikely" );
            m_fields->Append( "upper" );
            m_fields->Append( "zeroblob" );
        }
        if( ( m_dbType == "ODBC" && m_dbSubtype == "Sybase" ) || m_dbType == "Sybase" )
        {
            m_fields->Append( "abs" );
            m_fields->Append( "acos" );
            m_fields->Append( "argn" );
            m_fields->Append( "ascii" );
            m_fields->Append( "asin" );
            m_fields->Append( "atan" );
            m_fields->Append( "atan2" );
            m_fields->Append( "avg" );
            m_fields->Append( "bfile" );
            m_fields->Append( "biginttohex" );
            m_fields->Append( "bit_length" );
            m_fields->Append( "byte_length" );
            m_fields->Append( "byte_length64" );
            m_fields->Append( "byte_substr64" );
            m_fields->Append( "cast" );
            m_fields->Append( "ceil" );
            m_fields->Append( "ceiling" );
            m_fields->Append( "char" );
            m_fields->Append( "char_length" );
            m_fields->Append( "char_length64" );
            m_fields->Append( "charindex" );
            m_fields->Append( "coalesce" );
            m_fields->Append( "col_length" );
            m_fields->Append( "col_name" );
            m_fields->Append( "connection_property" );
            m_fields->Append( "convert" );
            m_fields->Append( "corr" );
            m_fields->Append( "cos" );
            m_fields->Append( "cot" );
            m_fields->Append( "covar_pop" );
            m_fields->Append( "covar_samp" );
            m_fields->Append( "count" );
            m_fields->Append( "cum_dist" );
            m_fields->Append( "datalength" );
            m_fields->Append( "date" );
            m_fields->Append( "dateadd" );
            m_fields->Append( "dateceiling" );
            m_fields->Append( "datediff" );
            m_fields->Append( "datefloor" );
            m_fields->Append( "dateformat" );
            m_fields->Append( "datename" );
            m_fields->Append( "datepart" );
            m_fields->Append( "dateround" );
            m_fields->Append( "datetime" );
            m_fields->Append( "day" );
            m_fields->Append( "dayname" );
            m_fields->Append( "days" );
            m_fields->Append( "db_id" );
            m_fields->Append( "db_name" );
            m_fields->Append( "db_property" );
            m_fields->Append( "degrees" );
            m_fields->Append( "dens_rank" );
            m_fields->Append( "difference" );
            m_fields->Append( "dow" );
            m_fields->Append( "errormsg" );
            m_fields->Append( "event_condition" );
            m_fields->Append( "event_condition_name" );
            m_fields->Append( "event_parameter" );
            m_fields->Append( "exp" );
            m_fields->Append( "exp_weighted_avg" );
            m_fields->Append( "first_value" );
            m_fields->Append( "floor" );
            m_fields->Append( "getdate" );
            m_fields->Append( "graphical_plan" );
            m_fields->Append( "grouping" );
            m_fields->Append( "group_member" );
            m_fields->Append( "hextobigint" );
            m_fields->Append( "hextoint" );
            m_fields->Append( "hour" );
            m_fields->Append( "hours" );
            m_fields->Append( "html_decode" );
            m_fields->Append( "html_encode" );
            m_fields->Append( "html_plan" );
            m_fields->Append( "http_decode" );
            m_fields->Append( "http_encode" );
            m_fields->Append( "http_header" );
            m_fields->Append( "http_variable" );
            m_fields->Append( "ifnull" );
            m_fields->Append( "index_col" );
            m_fields->Append( "insertstr" );
            m_fields->Append( "inttohex" );
            m_fields->Append( "isdate" );
            m_fields->Append( "isnull" );
            m_fields->Append( "isnumeric" );
            m_fields->Append( "lag" );
            m_fields->Append( "last_value" );
            m_fields->Append( "lcase" );
            m_fields->Append( "lead" );
            m_fields->Append( "left" );
            m_fields->Append( "len" );
            m_fields->Append( "length" );
            m_fields->Append( "list" );
            m_fields->Append( "ln" );
            m_fields->Append( "locate" );
            m_fields->Append( "log" );
            m_fields->Append( "log10" );
            m_fields->Append( "lower" );
            m_fields->Append( "ltrim" );
            m_fields->Append( "max" );
            m_fields->Append( "median" );
            m_fields->Append( "min" );
            m_fields->Append( "minute" );
            m_fields->Append( "minutes" );
            m_fields->Append( "mod" );
            m_fields->Append( "month" );
            m_fields->Append( "monthname" );
            m_fields->Append( "months" );
            m_fields->Append( "newid" );
            m_fields->Append( "next_connection" );
            m_fields->Append( "next_database" );
            m_fields->Append( "next_http_header" );
            m_fields->Append( "next_http_varioable" );
            m_fields->Append( "now" );
            m_fields->Append( "ntile" );
            m_fields->Append( "nullif" );
            m_fields->Append( "number" );
            m_fields->Append( "object_id" );
            m_fields->Append( "object_name" );
            m_fields->Append( "octet_length" );
            m_fields->Append( "patindex" );
            m_fields->Append( "percent_rank" );
            m_fields->Append( "percentile_cont" );
            m_fields->Append( "percentile_disc" );
            m_fields->Append( "pi" );
            m_fields->Append( "power" );
            m_fields->Append( "property" );
            m_fields->Append( "property_description" );
            m_fields->Append( "property_name" );
            m_fields->Append( "property_number" );
            m_fields->Append( "quarter" );
            m_fields->Append( "radians" );
            m_fields->Append( "rand" );
            m_fields->Append( "rank" );
            m_fields->Append( "regr_avgx" );
            m_fields->Append( "regr_avgy" );
            m_fields->Append( "regr_count" );
            m_fields->Append( "regr_intercept" );
            m_fields->Append( "regr_r2" );
            m_fields->Append( "regr_slope" );
            m_fields->Append( "regr_sxx" );
            m_fields->Append( "regr_sxy" );
            m_fields->Append( "regr_syy" );
            m_fields->Append( "remainder" );
            m_fields->Append( "repeat" );
            m_fields->Append( "replace" );
            m_fields->Append( "replicate" );
            m_fields->Append( "reverse" );
            m_fields->Append( "right" );
            m_fields->Append( "round" );
            m_fields->Append( "row_number" );
            m_fields->Append( "rowid" );
            m_fields->Append( "rtrim" );
            m_fields->Append( "second" );
            m_fields->Append( "seconds" );
            m_fields->Append( "sign" );
            m_fields->Append( "similar" );
            m_fields->Append( "sin" );
            m_fields->Append( "sortkey" );
            m_fields->Append( "soundex" );
            m_fields->Append( "space" );
            m_fields->Append( "sqlflagger" );
            m_fields->Append( "sqrt" );
            m_fields->Append( "square" );
            m_fields->Append( "stddev" );
            m_fields->Append( "stddev_pop" );
            m_fields->Append( "stddev_samp" );
            m_fields->Append( "str" );
            m_fields->Append( "str_replace" );
            m_fields->Append( "string" );
            m_fields->Append( "strtouuid" );
            m_fields->Append( "stuff" );
            m_fields->Append( "substring" );
            m_fields->Append( "substring64" );
            m_fields->Append( "sum" );
            m_fields->Append( "suser_id" );
            m_fields->Append( "suser_name" );
            m_fields->Append( "tan" );
            m_fields->Append( "today" );
            m_fields->Append( "trim" );
            m_fields->Append( "truncnum" );
            m_fields->Append( "ts_arma_ar" );
            m_fields->Append( "ts_arma_const" );
            m_fields->Append( "ts_arma_ma" );
            m_fields->Append( "ts_autocorrelation" );
            m_fields->Append( "ts_auto_arima" );
            m_fields->Append( "ts_auto_arima_outlier" );
            m_fields->Append( "ts_auto_arima_result_aic" );
            m_fields->Append( "ts_auto_arima_result_aicc" );
            m_fields->Append( "ts_auto_arima_result_bic" );
            m_fields->Append( "ts_auto_arima_result_forecast_value" );
            m_fields->Append( "ts_auto_arima_result_forecast_error" );
            m_fields->Append( "ts_auto_arima_result_model_d" );
            m_fields->Append( "ts_auto_arima_result_model_p" );
            m_fields->Append( "ts_auto_arima_result_model_q" );
            m_fields->Append( "ts_auto_arima_result_model_s" );
            m_fields->Append( "ts_auto_arima_result_residual_sigma" );
            m_fields->Append( "ts_auto_uni_ar" );
            m_fields->Append( "ts_box_cox_xform" );
            m_fields->Append( "ts_difference" );
            m_fields->Append( "ts_double_array" );
            m_fields->Append( "ts_estimate_missing" );
            m_fields->Append( "ts_garch" );
            m_fields->Append( "ts_garch_result_a" );
            m_fields->Append( "ts_garch_result_aic" );
            m_fields->Append( "ts_int_array" );
            m_fields->Append( "ts_lack_of_fit" );
            m_fields->Append( "ts_lack_of_fit_p" );
            m_fields->Append( "ts_max_arma_ar" );
            m_fields->Append( "ts_max_arma_const" );
            m_fields->Append( "ts_max_arma_likelihood" );
            m_fields->Append( "ts_max_arma_ma" );
            m_fields->Append( "ts_outlier_identification" );
            m_fields->Append( "ts_partial_autocorrelation" );
            m_fields->Append( "ts_vwap" );
            m_fields->Append( "ucase" );
            m_fields->Append( "upper" );
            m_fields->Append( "user_id" );
            m_fields->Append( "user_name" );
            m_fields->Append( "uuidtostr" );
            m_fields->Append( "var_pop" );
            m_fields->Append( "var_samp" );
            m_fields->Append( "variance" );
            m_fields->Append( "weeks" );
            m_fields->Append( "weighted_avg" );
            m_fields->Append( "width_bucket" );
            m_fields->Append( "year" );
            m_fields->Append( "years" );
            m_fields->Append( "ymd" );
        }
        if( ( m_dbType == "ODBC" && m_dbSubtype == "Oracle" ) || m_dbType == "Oracle" )
        {
            m_fields->Append( "abs" );
            m_fields->Append( "acos" );
            m_fields->Append( "add_month" );
            m_fields->Append( "appendchildxml" );
            m_fields->Append( "ascii" );
            m_fields->Append( "asciistr" );
            m_fields->Append( "asin" );
            m_fields->Append( "atan" );
            m_fields->Append( "atan2" );
            m_fields->Append( "avg" );
            m_fields->Append( "bin_to_num" );
            m_fields->Append( "bitand" );
            m_fields->Append( "bfilename" );
            m_fields->Append( "cardinality" );
            m_fields->Append( "cast" );
            m_fields->Append( "ceil" );
            m_fields->Append( "chartorowid" );
            m_fields->Append( "chr" );
            m_fields->Append( "cluster_id" );
            m_fields->Append( "cluster_probability" );
            m_fields->Append( "cluster_set" );
            m_fields->Append( "coalesce" );
            m_fields->Append( "collect" );
            m_fields->Append( "compose" );
            m_fields->Append( "concat" );
            m_fields->Append( "convert" );
            m_fields->Append( "corr" );
            m_fields->Append( "corr_k" );
            m_fields->Append( "corr_s" );
            m_fields->Append( "cos" );
            m_fields->Append( "cosh" );
            m_fields->Append( "count" );
            m_fields->Append( "covar_pop" );
            m_fields->Append( "covar_samp" );
            m_fields->Append( "cume_dist" );
            m_fields->Append( "current_date" );
            m_fields->Append( "current_timestamp" );
            m_fields->Append( "cv" );
            m_fields->Append( "dbtimezone" );
            m_fields->Append( "decode" );
            m_fields->Append( "decompose" );
            m_fields->Append( "deletexml" );
            m_fields->Append( "dens_rank" );
            m_fields->Append( "depth" );
            m_fields->Append( "deref" );
            m_fields->Append( "dump" );
            m_fields->Append( "empty_blob" );
            m_fields->Append( "existsnode" );
            m_fields->Append( "exp" );
            m_fields->Append( "extract" );
            m_fields->Append( "extractvalue" );
            m_fields->Append( "feature_id" );
            m_fields->Append( "feature_set" );
            m_fields->Append( "feature_value" );
            m_fields->Append( "first" );
            m_fields->Append( "floor" );
            m_fields->Append( "from_tz" );
            m_fields->Append( "greatest" );
            m_fields->Append( "group_id" );
            m_fields->Append( "grouping" );
            m_fields->Append( "grouping_id" );
            m_fields->Append( "hextoraw" );
            m_fields->Append( "insertchildxml" );
            m_fields->Append( "insertxmlbefore" );
            m_fields->Append( "instr" );
            m_fields->Append( "intcap" );
            m_fields->Append( "iteration_number" );
            m_fields->Append( "last" );
            m_fields->Append( "last_day" );
            m_fields->Append( "least" );
            m_fields->Append( "length" );
            m_fields->Append( "ln" );
            m_fields->Append( "lnnvl" );
            m_fields->Append( "localtimestamp" );
            m_fields->Append( "log" );
            m_fields->Append( "lower" );
            m_fields->Append( "lpad" );
            m_fields->Append( "ltrim" );
            m_fields->Append( "make_ref" );
            m_fields->Append( "max" );
            m_fields->Append( "median" );
            m_fields->Append( "min" );
            m_fields->Append( "mod" );
            m_fields->Append( "months_between" );
            m_fields->Append( "nanvl" );
            m_fields->Append( "new_time" );
            m_fields->Append( "next_day" );
            m_fields->Append( "nls_charset_decl_len" );
            m_fields->Append( "nls_charset_id" );
            m_fields->Append( "nls_charset_name" );
            m_fields->Append( "nls_initcap" );
            m_fields->Append( "nls_lower" );
            m_fields->Append( "nls_upper" );
            m_fields->Append( "nlssort" );
            m_fields->Append( "nullif" );
            m_fields->Append( "numtodsinterval" );
            m_fields->Append( "numtoyminterval" );
            m_fields->Append( "nvl" );
            m_fields->Append( "nvl2" );
            m_fields->Append( "ora_hash" );
            m_fields->Append( "path" );
            m_fields->Append( "percent_rank" );
            m_fields->Append( "percentile_cont" );
            m_fields->Append( "percentile_disc" );
            m_fields->Append( "power" );
            m_fields->Append( "powermultiset" );
            m_fields->Append( "powermultiset_by_cardinality" );
            m_fields->Append( "prediction" );
            m_fields->Append( "prediction_cost" );
            m_fields->Append( "prediction_details" );
            m_fields->Append( "prediction_probability" );
            m_fields->Append( "prediction_set" );
            m_fields->Append( "presentnnv" );
            m_fields->Append( "presentv" );
            m_fields->Append( "previous" );
            m_fields->Append( "rank" );
            m_fields->Append( "rawidtochar" );
            m_fields->Append( "rawidtonchar" );
            m_fields->Append( "rawtohex" );
            m_fields->Append( "rawtonhex" );
            m_fields->Append( "ref" );
            m_fields->Append( "reftohex" );
            m_fields->Append( "regexp_instr" );
            m_fields->Append( "regexp_replace" );
            m_fields->Append( "regexp_substr" );
            m_fields->Append( "regr_avgx" );
            m_fields->Append( "regr_avgy" );
            m_fields->Append( "regr_count" );
            m_fields->Append( "regr_intercept" );
            m_fields->Append( "regr_r2" );
            m_fields->Append( "regr_slope" );
            m_fields->Append( "regr_sxx" );
            m_fields->Append( "regr_sxy" );
            m_fields->Append( "regr_syy" );
            m_fields->Append( "remainder" );
            m_fields->Append( "replace" );
            m_fields->Append( "round" );
            m_fields->Append( "rpad" );
            m_fields->Append( "rtrim" );
            m_fields->Append( "scn_to_timestamp" );
            m_fields->Append( "sessiontimezone" );
            m_fields->Append( "set" );
            m_fields->Append( "sign" );
            m_fields->Append( "sin" );
            m_fields->Append( "sinh" );
            m_fields->Append( "soundex" );
            m_fields->Append( "sqrt" );
            m_fields->Append( "stats_binomial_test" );
            m_fields->Append( "stats_crosstab" );
            m_fields->Append( "stats_f_test" );
            m_fields->Append( "stats_ks_test" );
            m_fields->Append( "stats_mode" );
            m_fields->Append( "stats_mw_test" );
            m_fields->Append( "stats_one_way_anova" );
            m_fields->Append( "stats_t_test_indef" );
            m_fields->Append( "stats_t_test_indefu" );
            m_fields->Append( "stats_t_test_one" );
            m_fields->Append( "stats_t_test_paired" );
            m_fields->Append( "stats_wsr_test" );
            m_fields->Append( "stddev" );
            m_fields->Append( "stddev_pop" );
            m_fields->Append( "stddev_samp" );
            m_fields->Append( "substr" );
            m_fields->Append( "sum" );
            m_fields->Append( "sys_dburigen" );
            m_fields->Append( "sys_connect_by_path" );
            m_fields->Append( "sys_context" );
            m_fields->Append( "sys_extract_utc" );
            m_fields->Append( "sys_guid" );
            m_fields->Append( "sys_typeid" );
            m_fields->Append( "sys_xmlagg" );
            m_fields->Append( "sys_xmlgen" );
            m_fields->Append( "sysdate" );
            m_fields->Append( "systimestamp" );
            m_fields->Append( "tan" );
            m_fields->Append( "tanh" );
            m_fields->Append( "timestamp_to_scn" );
            m_fields->Append( "to_binary_double" );
            m_fields->Append( "to_binary_float" );
            m_fields->Append( "to_char" );
            m_fields->Append( "to_clob" );
            m_fields->Append( "to_date" );
            m_fields->Append( "to_dsinterval" );
            m_fields->Append( "to_lob" );
            m_fields->Append( "to_multi_byte" );
            m_fields->Append( "to_nchar" );
            m_fields->Append( "to_nclob" );
            m_fields->Append( "to_number" );
            m_fields->Append( "to_single_byte" );
            m_fields->Append( "to_timestamp" );
            m_fields->Append( "to_timestamp_tz" );
            m_fields->Append( "to_dsinterval" );
            m_fields->Append( "to_yminterval" );
            m_fields->Append( "translate" );
            m_fields->Append( "treat" );
            m_fields->Append( "trim" );
            m_fields->Append( "trunc" );
            m_fields->Append( "tz_offset" );
            m_fields->Append( "uid" );
            m_fields->Append( "unistr" );
            m_fields->Append( "updatexml" );
            m_fields->Append( "upper" );
            m_fields->Append( "user" );
            m_fields->Append( "userenv" );
            m_fields->Append( "var_pop" );
            m_fields->Append( "var_samp" );
            m_fields->Append( "value" );
            m_fields->Append( "variance" );
            m_fields->Append( "vsize" );
            m_fields->Append( "width_bucket" );
            m_fields->Append( "xmlagg" );
            m_fields->Append( "xmlcdata" );
            m_fields->Append( "xmlcolattval" );
            m_fields->Append( "xmlcomment" );
            m_fields->Append( "xmlconcat" );
            m_fields->Append( "xmlforest" );
            m_fields->Append( "xmlparse" );
            m_fields->Append( "xmlpi" );
            m_fields->Append( "xmlquery" );
            m_fields->Append( "xmlroot" );
            m_fields->Append( "xmlsequence" );
            m_fields->Append( "xmlserialize" );
            m_fields->Append( "xmltable" );
            m_fields->Append( "xmltransform" );
        }
    }
    if( m_type == 1 )
    {
        for( std::vector<std::wstring>::iterator it = m_allFields.begin(); it < m_allFields.end(); it++ )
        {
            m_fields->Append( (*it) );
        }
    }
    if( m_type == 3 )
    {
        for( std::vector<QueryArguments>::iterator it = m_args.begin (); it < m_args.end (); ++it )
        {
            if( ( m_dbType == "ODBC" && m_dbSubtype == "Microsft SQL Sertver" ) || m_dbType == "Microsoft SQL Server" )
                m_fields->Append( "@" + (*it).m_name );
            else
                m_fields->Append( ":" + (*it).m_name );
        }
    }
}

void AddColumnsDialog::do_layout()
{
    // begin wxGlade: MyDialog::do_layout
    wxBoxSizer* sizer = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer1 = new wxBoxSizer( wxVERTICAL );
    wxBoxSizer* sizer2 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer3 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer4 = new wxBoxSizer( wxVERTICAL );
    sizer1->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer3->Add( m_fields, 0, wxEXPAND, 0 );
    sizer3->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer4->Add( m_paste, 0, 0, 0 );
    sizer4->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer4->Add( m_cancel, 0, 0, 0 );
    sizer3->Add( sizer4, 0, 0, 0 );
    sizer2->Add( sizer3, 0, 0, 0 );
    sizer2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer1->Add( sizer2, 0, 0, 0 );
    sizer1->Add( 5, 5, 0, wxEXPAND, 0 );
    m_panel->SetSizer( sizer1 );
    sizer->Add( m_panel, 1, 0, 0 );
    SetSizer( sizer );
    sizer->Fit( this );
    Layout();
    // end wxGlade
}

void AddColumnsDialog::OnPasteUpdateUI(wxUpdateUIEvent &event)
{
    if( m_fields->GetSelection() != wxNOT_FOUND )
        event.Enable( true );
    else
        event.Enable( false );
}

wxListBox *AddColumnsDialog::GetFieldsControl() const
{
    return m_fields;
}

void AddColumnsDialog::OnFieldsDoubleClick(wxCommandEvent &WXUNUSED(event))
{
    EndModal( wxID_OK );
}

int AddColumnsDialog::ShowModal()
{
    wxSize size = GetSize();
    SetPosition( wxPoint( m_pos.x, m_pos.y - size.y ) );
    return wxDialog::ShowModal();
}